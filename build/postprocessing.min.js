/**
 * postprocessing v0.0.0 build Dec 07 2015
 * https://github.com/vanruesc/postprocessing
 * Copyright 2015 Raoul van RÃ¼schen, Zlib
 */
!function(a,b){"use strict";function c(){b.ShaderMaterial.call(this,{uniforms:{tDiffuse:{type:"t",value:null},opacity:{type:"f",value:1}},fragmentShader:s.fragment,vertexShader:s.vertex})}function d(){b.ShaderMaterial.call(this,{uniforms:{tDiffuse:{type:"t",value:null}},fragmentShader:t.fragment,vertexShader:t.vertex})}function e(){b.ShaderMaterial.call(this,{defines:{MIP_LEVEL_1X1:0},uniforms:{lastLum:{type:"t",value:null},currentLum:{type:"t",value:null},delta:{type:"f",value:.016},tau:{type:"f",value:1}},fragmentShader:u.fragment,vertexShader:u.vertex})}function f(){b.ShaderMaterial.call(this,{uniforms:{tDiffuse:{type:"t",value:null},luminanceMap:{type:"t",value:null},averageLuminance:{type:"f",value:1},maxLuminance:{type:"f",value:16},middleGrey:{type:"f",value:.6}},fragmentShader:v.fragment,vertexShader:v.vertex})}function g(){b.ShaderMaterial.call(this,{uniforms:{tDiffuse:{type:"t",value:null},tSize:{type:"v2",value:new b.Vector2(256,256)},center:{type:"v2",value:new b.Vector2(.5,.5)},angle:{type:"f",value:1.57},scale:{type:"f",value:1}},fragmentShader:w.fragment,vertexShader:w.vertex})}function h(){b.ShaderMaterial.call(this,{uniforms:{tDiffuse:{type:"t",value:null},tDisp:{type:"t",value:null},byp:{type:"i",value:0},amount:{type:"f",value:.8},angle:{type:"f",value:.02},seed:{type:"f",value:.02},seedX:{type:"f",value:.02},seedY:{type:"f",value:.02},distortionX:{type:"f",value:.5},distortionY:{type:"f",value:.6},colS:{type:"f",value:.05}},fragmentShader:x.fragment,vertexShader:x.vertex})}function i(a,b){this.scene=a,this.camera=b,this.enabled=!0,this.clear=!0,this.needsSwap=!1}function j(a){i.call(this,new b.Scene,new b.OrthographicCamera(-1,1,1,-1,0,1)),this.material=new c,this.renderTarget=a,void 0===this.renderTarget&&(this.renderTarget=new b.WebGLRenderTarget(window.innerWidth,window.innerHeight,{minFilter:b.LinearFilter,magFilter:b.LinearFilter,format:b.RGBFormat,stencilBuffer:!1})),this.clear=!1,this.quad=new b.Mesh(new b.PlaneBufferGeometry(2,2),null),this.scene.add(this.quad)}function k(a,b){i.call(this,a,b),this.inverse=!1}function l(){i.call(this)}function m(a,c){i.call(this,new b.Scene,new b.OrthographicCamera(-1,1,1,-1,0,1)),this.textureID=void 0!==c?c:"tDiffuse",this.shader=a,this.renderToScreen=!1,this.needsSwap=!0,this.clear=!1,this.quad=new b.Mesh(new b.PlaneBufferGeometry(2,2),null),this.scene.add(this.quad)}function n(a,c,d,e,f){i.call(this,a,c),this.overrideMaterial=d,this.clearColor=e,this.clearAlpha=void 0!==f?f:1,this.oldClearColor=new b.Color,this.oldClearAlpha=1}function o(a,d){i.call(this,new b.Scene,new b.OrthographicCamera(-1,1,1,-1,0,1)),this.material=new c,this.material.uniforms.tDiffuse.value=a,this.material.uniforms.opacity.value=void 0!==d?d:1,this.quad=new b.Mesh(new b.PlaneBufferGeometry(2,2),null),this.scene.add(this.quad)}function p(a,c,d){i.call(this,new b.Scene,new b.OrthographicCamera(-1,1,1,-1,0,1)),this.material=new g,void 0!==a&&this.material.uniforms.center.value.copy(a),void 0!==c&&(this.material.uniforms.angle.value=c),void 0!==d&&(this.material.uniforms.scale.value=d),this.renderToScreen=!1,this.needsSwap=!0,this.quad=new b.Mesh(new b.PlaneBufferGeometry(2,2),null),this.scene.add(this.quad)}function q(a){i.call(this,new b.Scene,new b.OrthographicCamera(-1,1,1,-1,0,1)),void 0===a&&(a=64),this.material=new h,this.material.uniforms.tDisp.value=this.generateHeightmap(a),this.renderToScreen=!1,this.needsSwap=!0,this.quad=new b.Mesh(new b.PlaneBufferGeometry(2,2),null),this.scene.add(this.quad),this.goWild=!1,this.curF=0,this.generateTrigger()}function r(a,d){if(this.renderer=a,void 0===d){var e=a.getPixelRatio(),f=Math.floor(a.context.canvas.width/e)||1,g=Math.floor(a.context.canvas.height/e)||1,h={minFilter:b.LinearFilter,magFilter:b.LinearFilter,format:b.RGBFormat,stencilBuffer:!1};d=new b.WebGLRenderTarget(f,g,h)}this.renderTarget1=d,this.renderTarget2=d.clone(),this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2,this.passes=[],this.copyPass=new m(new c)}b="default"in b?b["default"]:b;var s={fragment:"uniform sampler2D tDiffuse;\nuniform float opacity;\n\nvarying vec2 vUv;\n\nvoid main() {\n\n	vec4 texel = texture2D(tDiffuse, vUv);\n	gl_FragColor = opacity * texel;\n\n}\n",vertex:"varying vec2 vUv;\n\nvoid main() {\n\n	vUv = uv;\n	gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n\n}\n"};c.prototype=Object.create(b.ShaderMaterial.prototype),c.prototype.constructor=c;var t={fragment:"uniform sampler2D tDiffuse;\nvarying vec2 vUv;\n\nvoid main() {\n\n	vec3 texel = texture2D(tDiffuse, vUv).rgb;\n	vec3 luma = vec3(0.299, 0.587, 0.114);\n	float v = dot(texel, luma);\n\n	gl_FragColor = vec4(v, v, v, texel.w);\n\n}\n",vertex:"varying vec2 vUv;\n\nvoid main() {\n\n	vUv = uv;\n	gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n\n}\n"};d.prototype=Object.create(b.ShaderMaterial.prototype),d.prototype.constructor=d;var u={fragment:"uniform sampler2D lastLum;\nuniform sampler2D currentLum;\nuniform float delta;\nuniform float tau;\n\nvarying vec2 vUv;\n\nvoid main() {\n\n	vec4 lastLum = texture2D(lastLum, vUv, MIP_LEVEL_1X1);\n	vec4 currentLum = texture2D(currentLum, vUv, MIP_LEVEL_1X1);\n\n	float fLastLum = lastLum.r;\n	float fCurrentLum = currentLum.r;\n\n	// Better results with squared input luminance.\n	fCurrentLum *= fCurrentLum;\n\n	// Adapt the luminance using Pattanaik's technique.\n	float fAdaptedLum = fLastLum + (fCurrentLum - fLastLum) * (1.0 - exp(-delta * tau));\n	// fAdaptedLum = sqrt(fAdaptedLum);\n\n	gl_FragColor = vec4(fAdaptedLum, fAdaptedLum, fAdaptedLum, 1.0);\n\n}\n",vertex:"varying vec2 vUv;\n\nvoid main() {\n\n	vUv = uv;\n	gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n\n}\n"};e.prototype=Object.create(b.ShaderMaterial.prototype),e.prototype.constructor=e;var v={fragment:"uniform sampler2D tDiffuse;\nuniform float middleGrey;\nuniform float maxLuminance;\n\n#ifdef ADAPTED_LUMINANCE\n\n	uniform sampler2D luminanceMap;\n\n#else\n\n	uniform float averageLuminance;\n\n#endif\n\nvarying vec2 vUv;\n\nconst vec3 LUM_CONVERT = vec3(0.299, 0.587, 0.114);\n\nvec3 toneMap(vec3 vColor) {\n\n	#ifdef ADAPTED_LUMINANCE\n\n		// Get the calculated average luminance.\n		float fLumAvg = texture2D(luminanceMap, vec2(0.5, 0.5)).r;\n\n	#else\n\n		float fLumAvg = averageLuminance;\n\n	#endif\n\n	// Calculate the luminance of the current pixel.\n	float fLumPixel = dot(vColor, LUM_CONVERT);\n\n	// Apply the modified operator (Eq. 4).\n	float fLumScaled = (fLumPixel * middleGrey) / fLumAvg;\n\n	float fLumCompressed = (fLumScaled * (1.0 + (fLumScaled / (maxLuminance * maxLuminance)))) / (1.0 + fLumScaled);\n	return fLumCompressed * vColor;\n\n}\n\nvoid main() {\n\n	vec4 texel = texture2D(tDiffuse, vUv);\n	gl_FragColor = vec4(toneMap(texel.rgb), texel.a);\n\n}\n",vertex:"varying vec2 vUv;\n\nvoid main() {\n\n	vUv = uv;\n	gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n\n}\n"};f.prototype=Object.create(b.ShaderMaterial.prototype),f.prototype.constructor=f;var w={fragment:"uniform sampler2D tDiffuse;\nuniform float center;\nuniform float tSize;\nuniform float angle;\nuniform float scale;\n\nvarying vec2 vUv;\n\nfloat pattern() {\n\n	float s = sin(angle);\n	float c = cos(angle);\n\n	vec2 tex = vUv * tSize - center;\n	vec2 point = vec2(c * tex.x - s * tex.y, s * tex.x + c * tex.y) * scale;\n\n	return (sin(point.x) * sin(point.y)) * 4.0;\n\n}\n\nvoid main() {\n\n	vec4 color = texture2D(tDiffuse, vUv);\n	float average = (color.r + color.g + color.b) / 3.0;\n\n	gl_FragColor = vec4(vec3(average * 10.0 - 5.0 + pattern()), color.a);\n\n}\n",vertex:"varying vec2 vUv;\n\nvoid main() {\n\n	vUv = uv;\n	gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n\n}\n"};g.prototype=Object.create(b.ShaderMaterial.prototype),g.prototype.constructor=g;var x={fragment:"uniform sampler2D tDiffuse;\nuniform sampler2D tDisp;\nuniform int byp;\nuniform float amount;\nuniform float angle;\nuniform float seed;\nuniform float seedX;\nuniform float seedY;\nuniform float distortionX;\nuniform float distortionY;\nuniform float colS;\n\nvarying vec2 vUv;\n\nfloat rand(vec2 co) {\n\n	return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\n\n}\n\nvoid main() {\n\n	vec2 coord = vUv;\n\n	float xs, ys;\n	vec4 normal;\n\n	vec2 offset;\n	vec4 cr, cga, cb;\n	vec4 snow, color;\n\n	if(byp < 1) {\n\n		xs = floor(gl_FragCoord.x / 0.5);\n		ys = floor(gl_FragCoord.y / 0.5);\n\n		normal = texture2D(tDisp, coord * seed * seed);\n\n		if(coord.y < distortionX + colS && coord.y > distortionX - colS * seed) {\n\n			if(seedX > 0.0){\n\n				coord.y = 1.0 - (coord.y + distortionY);\n\n			} else {\n\n				coord.y = distortionY;\n\n			}\n\n		}\n\n		if(coord.x < distortionY + colS && coord.x > distortionY - colS * seed) {\n\n			if(seedY > 0.0){\n\n				coord.x = distortionX;\n\n			} else {\n\n				coord.x = 1. - (coord.x + distortionX);\n\n			}\n\n		}\n\n		coord.x += normal.x * seedX * (seed / 5.0);\n		coord.y += normal.y * seedY * (seed / 5.0);\n\n		// Adopted from RGB shift shader.\n		offset = amount * vec2(cos(angle), sin(angle));\n		cr = texture2D(tDiffuse, coord + offset);\n		cga = texture2D(tDiffuse, coord);\n		cb = texture2D(tDiffuse, coord - offset);\n		color = vec4(cr.r, cga.g, cb.b, cga.a);\n		snow = 200.0 * amount * vec4(rand(vec2(xs * seed,ys * seed * 50.0)) * 0.2);\n		color += snow;\n\n	} else {\n\n		color = texture2D(tDiffuse, vUv);\n\n	}\n\n	gl_FragColor = color;\n\n}\n",vertex:"varying vec2 vUv;\n\nvoid main() {\n\n	vUv = uv;\n	gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n\n}\n"};h.prototype=Object.create(b.ShaderMaterial.prototype),h.prototype.constructor=h,i.prototype.render=function(a,b,c,d){},j.prototype=Object.create(i.prototype),j.prototype.constructor=j,j.prototype.render=function(a,b,c,d){this.material.uniforms.tDiffuse.value=c,this.quad.material=this.material,a.render(this.scene,this.camera,this.renderTarget,this.clear)},k.prototype=Object.create(i.prototype),k.prototype.constructor=k,k.prototype.render=function(a,b,c,d,e){var f,g,h=a.context;h.colorMask(!1,!1,!1,!1),h.depthMask(!1),this.inverse?(f=0,g=1):(f=1,g=0),h.enable(h.STENCIL_TEST),h.stencilOp(h.REPLACE,h.REPLACE,h.REPLACE),h.stencilFunc(h.ALWAYS,f,4294967295),h.clearStencil(g),a.render(this.scene,this.camera,c,this.clear),a.render(this.scene,this.camera,b,this.clear),h.colorMask(!0,!0,!0,!0),h.depthMask(!0),h.stencilFunc(h.EQUAL,1,4294967295),h.stencilOp(h.KEEP,h.KEEP,h.KEEP)},l.prototype=Object.create(i.prototype),l.prototype.constructor=l,l.prototype.render=function(a,b,c,d,e){a.context.disable(context.STENCIL_TEST)},m.prototype.render=function(a,b,c,d){void 0!==this.shader.material.uniforms[this.textureID]&&(this.shader.material.uniforms[this.textureID].value=c),this.quad.material=this.shader.material,this.renderToScreen?a.render(this.scene,this.camera):a.render(this.scene,this.camera,b,this.clear)},n.prototype=Object.create(i.prototype),n.prototype.constructor=n,n.prototype.render=function(a,b,c,d){var e=void 0!==this.clearColor;this.scene.overrideMaterial=this.overrideMaterial,e&&(this.oldClearColor.copy(a.getClearColor()),this.oldClearAlpha=a.getClearAlpha(),a.setClearColor(this.clearColor,this.clearAlpha)),a.render(this.scene,this.camera,c,this.clear),e&&a.setClearColor(this.oldClearColor,this.oldClearAlpha),this.scene.overrideMaterial=null},o.prototype=Object.create(i.prototype),o.prototype.constructor=o,o.prototype.render=function(a,b,c,d){this.quad.material=this.material,a.render(this.scene,this.camera,c)},p.prototype=Object.create(i.prototype),p.prototype.constructor=p,p.prototype.render=function(a,b,c,d){this.material.uniforms.tDiffuse.value=c,this.material.uniforms.tSize.value.set(c.width,c.height),this.quad.material=this.material,this.renderToScreen?a.render(this.scene,this.camera):a.render(this.scene,this.camera,b,!1)},q.prototype=Object.create(i.prototype),q.prototype.constructor=q,q.prototype.render=function(a,c,d){var e=this.material.uniforms;e.tDiffuse.value=d,e.seed.value=Math.random(),e.byp.value=0,this.curF%this.randX===0||this.goWild?(e.amount.value=Math.random()/30,e.angle.value=b.Math.randFloat(-Math.PI,Math.PI),e.seedX.value=b.Math.randFloat(-1,1),e.seedY.value=b.Math.randFloat(-1,1),e.distortionX.value=b.Math.randFloat(0,1),e.distortionY.value=b.Math.randFloat(0,1),this.curF=0,this.generateTrigger()):this.curF%this.randX<this.randX/5?(e.amount.value=Math.random()/90,e.angle.value=b.Math.randFloat(-Math.PI,Math.PI),e.distortionX.value=b.Math.randFloat(0,1),e.distortionY.value=b.Math.randFloat(0,1),e.seedX.value=b.Math.randFloat(-.3,.3),e.seedY.value=b.Math.randFloat(-.3,.3)):this.goWild||(e.byp.value=1),++this.curF,this.quad.material=this.material,this.renderToScreen?a.render(this.scene,this.camera):a.render(this.scene,this.camera,c,!1)},q.prototype.generateTrigger=function(){this.randX=b.Math.randInt(120,240)},q.prototype.generateHeightmap=function(a){var c,d,e,f=a*a,g=new Float32Array(3*f);for(c=0;f>c;++c)d=b.Math.randFloat(0,1),g[3*c]=d,g[3*c+1]=d,g[3*c+2]=d;return e=new b.DataTexture(g,a,a,b.RGBFormat,b.FloatType),e.needsUpdate=!0,e},r.prototype.swapBuffers=function(){var a=this.readBuffer;this.readBuffer=this.writeBuffer,this.writeBuffer=a},r.prototype.addPass=function(a){this.passes.push(a)},r.prototype.insertPass=function(a,b){this.passes.splice(b,0,a)},r.prototype.render=function(a){this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2;var b,c,d,e,f=!1;for(d=0,e=this.passes.length;e>d;++d)c=this.passes[d],c.enabled&&(c.render(this.renderer,this.writeBuffer,this.readBuffer,a,f),c.needsSwap&&(f&&(b=this.renderer.context,b.stencilFunc(b.NOTEQUAL,1,4294967295),this.copyPass.render(this.renderer,this.writeBuffer,this.readBuffer,a),b.stencilFunc(b.EQUAL,1,4294967295)),this.swapBuffers()),c instanceof k?f=!0:c instanceof l&&(f=!1))},r.prototype.reset=function(a){var b;void 0===a&&(a=this.renderTarget1.clone(),b=this.renderer.getPixelRatio(),a.width=Math.floor(this.renderer.context.canvas.width/b),a.height=Math.floor(this.renderer.context.canvas.height/b)),this.renderTarget1.dispose(),this.renderTarget1=a,this.renderTarget2.dispose(),this.renderTarget2=a.clone(),this.writeBuffer=this.renderTarget1,this.readBuffer=this.renderTarget2},r.prototype.setSize=function(a,b){this.renderTarget1.setSize(a,b),this.renderTarget2.setSize(a,b)},a.EffectComposer=r,a.Pass=i,a.SavePass=j,a.MaskPass=k,a.ClearMaskPass=l,a.ShaderPass=m,a.RenderPass=n,a.TexturePass=o,a.DotScreenPass=p,a.GlitchPass=q,a.CopyMaterial=c,a.LuminosityMaterial=d,a.AdaptiveLuminosityMaterial=e,a.ToneMappingMaterial=f,a.DotScreenMaterial=g,a.GlitchMaterial=h}(this.POSTPROCESSING={},THREE);