{
    "project": {
        "name": "postprocessing",
        "description": "A post processing library that provides the means to implement 2D filter effects for three.js.",
        "version": "1.0.2",
        "url": "https://github.com/vanruesc/postprocessing"
    },
    "files": {
        "src\\materials\\adaptive-luminosity\\index.js": {
            "name": "src\\materials\\adaptive-luminosity\\index.js",
            "modules": {},
            "classes": {
                "AdaptiveLuminosityMaterial": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\materials\\bokeh\\index.js": {
            "name": "src\\materials\\bokeh\\index.js",
            "modules": {},
            "classes": {
                "BokehMaterial": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\materials\\combine\\index.js": {
            "name": "src\\materials\\combine\\index.js",
            "modules": {},
            "classes": {
                "CombineMaterial": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\materials\\convolution\\index.js": {
            "name": "src\\materials\\convolution\\index.js",
            "modules": {},
            "classes": {
                "ConvolutionMaterial": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\materials\\copy\\index.js": {
            "name": "src\\materials\\copy\\index.js",
            "modules": {},
            "classes": {
                "CopyMaterial": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\materials\\dot-screen\\index.js": {
            "name": "src\\materials\\dot-screen\\index.js",
            "modules": {},
            "classes": {
                "DotScreenMaterial": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\materials\\film\\index.js": {
            "name": "src\\materials\\film\\index.js",
            "modules": {},
            "classes": {
                "FilmMaterial": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\materials\\glitch\\index.js": {
            "name": "src\\materials\\glitch\\index.js",
            "modules": {},
            "classes": {
                "GlitchMaterial": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\materials\\god-rays\\index.js": {
            "name": "src\\materials\\god-rays\\index.js",
            "modules": {},
            "classes": {
                "GodRaysMaterial": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\materials\\luminosity\\index.js": {
            "name": "src\\materials\\luminosity\\index.js",
            "modules": {},
            "classes": {
                "LuminosityMaterial": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\materials\\smaa-blend\\index.js": {
            "name": "src\\materials\\smaa-blend\\index.js",
            "modules": {},
            "classes": {
                "SMAABlendMaterial": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\materials\\smaa-color-edges\\index.js": {
            "name": "src\\materials\\smaa-color-edges\\index.js",
            "modules": {},
            "classes": {
                "SMAAColorEdgesMaterial": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\materials\\smaa-weights\\index.js": {
            "name": "src\\materials\\smaa-weights\\index.js",
            "modules": {},
            "classes": {
                "SMAAWeightsMaterial": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\materials\\tone-mapping\\index.js": {
            "name": "src\\materials\\tone-mapping\\index.js",
            "modules": {},
            "classes": {
                "ToneMappingMaterial": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\materials\\index.js": {
            "name": "src\\materials\\index.js",
            "modules": {
                "materials": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\passes\\bloom.js": {
            "name": "src\\passes\\bloom.js",
            "modules": {},
            "classes": {
                "BloomPass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\passes\\bokeh.js": {
            "name": "src\\passes\\bokeh.js",
            "modules": {},
            "classes": {
                "BokehPass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\passes\\clear-mask.js": {
            "name": "src\\passes\\clear-mask.js",
            "modules": {},
            "classes": {
                "ClearMaskPass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\passes\\dot-screen.js": {
            "name": "src\\passes\\dot-screen.js",
            "modules": {},
            "classes": {
                "DotScreenPass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\passes\\film.js": {
            "name": "src\\passes\\film.js",
            "modules": {},
            "classes": {
                "FilmPass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\passes\\glitch.js": {
            "name": "src\\passes\\glitch.js",
            "modules": {},
            "classes": {
                "GlitchPass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\passes\\god-rays.js": {
            "name": "src\\passes\\god-rays.js",
            "modules": {},
            "classes": {
                "GodRaysPass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\passes\\index.js": {
            "name": "src\\passes\\index.js",
            "modules": {
                "passes": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\passes\\mask.js": {
            "name": "src\\passes\\mask.js",
            "modules": {},
            "classes": {
                "MaskPass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\passes\\pass.js": {
            "name": "src\\passes\\pass.js",
            "modules": {},
            "classes": {
                "Pass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\passes\\render.js": {
            "name": "src\\passes\\render.js",
            "modules": {},
            "classes": {
                "RenderPass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\passes\\save.js": {
            "name": "src\\passes\\save.js",
            "modules": {},
            "classes": {
                "SavePass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\passes\\shader.js": {
            "name": "src\\passes\\shader.js",
            "modules": {},
            "classes": {
                "ShaderPass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\passes\\smaa.js": {
            "name": "src\\passes\\smaa.js",
            "modules": {},
            "classes": {
                "SMAAPass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\passes\\tone-mapping.js": {
            "name": "src\\passes\\tone-mapping.js",
            "modules": {},
            "classes": {
                "ToneMappingPass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\effect-composer.js": {
            "name": "src\\effect-composer.js",
            "modules": {},
            "classes": {
                "EffectComposer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\index.js": {
            "name": "src\\index.js",
            "modules": {
                "postprocessing": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "postprocessing": {
            "name": "postprocessing",
            "submodules": {
                "materials": 1,
                "passes": 1
            },
            "elements": {},
            "classes": {
                "AdaptiveLuminosityMaterial": 1,
                "BokehMaterial": 1,
                "CombineMaterial": 1,
                "ConvolutionMaterial": 1,
                "CopyMaterial": 1,
                "DotScreenMaterial": 1,
                "FilmMaterial": 1,
                "GlitchMaterial": 1,
                "GodRaysMaterial": 1,
                "LuminosityMaterial": 1,
                "SMAABlendMaterial": 1,
                "SMAAColorEdgesMaterial": 1,
                "SMAAWeightsMaterial": 1,
                "ToneMappingMaterial": 1,
                "BloomPass": 1,
                "BokehPass": 1,
                "ClearMaskPass": 1,
                "DotScreenPass": 1,
                "FilmPass": 1,
                "GlitchPass": 1,
                "GodRaysPass": 1,
                "MaskPass": 1,
                "Pass": 1,
                "RenderPass": 1,
                "SavePass": 1,
                "ShaderPass": 1,
                "SMAAPass": 1,
                "ToneMappingPass": 1,
                "EffectComposer": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src\\effect-composer.js",
            "line": 10,
            "description": "Exposure of the library components."
        },
        "materials": {
            "name": "materials",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "postprocessing",
            "namespace": "",
            "file": "src\\materials\\index.js",
            "line": 1,
            "description": "A compilation of the shader materials that are used \nin the post processing passes."
        },
        "passes": {
            "name": "passes",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "postprocessing",
            "namespace": "",
            "file": "src\\passes\\index.js",
            "line": 1,
            "description": "A compilation of the post processing passes."
        }
    },
    "classes": {
        "AdaptiveLuminosityMaterial": {
            "name": "AdaptiveLuminosityMaterial",
            "shortname": "AdaptiveLuminosityMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "postprocessing",
            "file": "src\\materials\\adaptive-luminosity\\index.js",
            "line": 4,
            "description": "An adaptive luminosity shader material.",
            "is_constructor": 1,
            "extends": "ShaderMaterial"
        },
        "BokehMaterial": {
            "name": "BokehMaterial",
            "shortname": "BokehMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "postprocessing",
            "file": "src\\materials\\bokeh\\index.js",
            "line": 4,
            "description": "Depth of Field shader (Bokeh).\n\nOriginal code by Martins Upitis:\n http://artmartinsh.blogspot.com/2010/02/glsl-lens-blur-filter-with-bokeh.html",
            "is_constructor": 1,
            "extends": "ShaderMaterial",
            "params": [
                {
                    "name": "options",
                    "description": "- The options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "focus",
                            "description": "- Focus distance.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1.0"
                        },
                        {
                            "name": "aspect",
                            "description": "- Camera aspect factor.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1.0"
                        },
                        {
                            "name": "aperture",
                            "description": "- Camera aperture scale. Bigger values for shallower depth of field.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.025"
                        },
                        {
                            "name": "maxBlur",
                            "description": "- Maximum blur strength.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1.0"
                        }
                    ]
                }
            ]
        },
        "CombineMaterial": {
            "name": "CombineMaterial",
            "shortname": "CombineMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "postprocessing",
            "file": "src\\materials\\combine\\index.js",
            "line": 4,
            "description": "A material for combining two textures.",
            "is_constructor": 1,
            "extends": "ShaderMaterial",
            "params": [
                {
                    "name": "invertTexture1",
                    "description": "- Invert the first texture's rgb values.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "invertTexture2",
                    "description": "- Invert the second texture's rgb values.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ]
        },
        "ConvolutionMaterial": {
            "name": "ConvolutionMaterial",
            "shortname": "ConvolutionMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "postprocessing",
            "file": "src\\materials\\convolution\\index.js",
            "line": 4,
            "description": "A convolution blur shader material.\n\nUse this shader five times in a row while adjusting the kernel \nbefore each render call in order to get the same result as with \na 35x35 Gauss filter.\n\nImplementation based on the GDC2003 Presentation by Masaki Kawase, Bunkasha Games:\nFrame Buffer Postprocessing Effects in DOUBLE-S.T.E.A.L (Wreckless)\n\nFurther modified according to:\n https://developer.apple.com/library/ios/documentation/3DDrawing/Conceptual/OpenGLES_ProgrammingGuide/BestPracticesforShaders/BestPracticesforShaders.html#//apple_ref/doc/uid/TP40008793-CH7-SW15",
            "is_constructor": 1,
            "extends": "ShaderMaterial",
            "params": [
                {
                    "name": "texelSize",
                    "description": "- The absolute screen texel size.",
                    "type": "Vector2",
                    "optional": true
                }
            ]
        },
        "CopyMaterial": {
            "name": "CopyMaterial",
            "shortname": "CopyMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "postprocessing",
            "file": "src\\materials\\copy\\index.js",
            "line": 4,
            "description": "A simple copy shader material.",
            "is_constructor": 1,
            "extends": "ShaderMaterial"
        },
        "DotScreenMaterial": {
            "name": "DotScreenMaterial",
            "shortname": "DotScreenMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "postprocessing",
            "file": "src\\materials\\dot-screen\\index.js",
            "line": 4,
            "description": "A dot screen shader material.",
            "is_constructor": 1,
            "extends": "ShaderMaterial",
            "params": [
                {
                    "name": "average",
                    "description": "- Whether the shader should output the colour average (black and white).",
                    "type": "Boolean",
                    "optional": true
                }
            ]
        },
        "FilmMaterial": {
            "name": "FilmMaterial",
            "shortname": "FilmMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "postprocessing",
            "file": "src\\materials\\film\\index.js",
            "line": 4,
            "description": "A cinematic shader that provides the following effects:\n - Film Grain\n - Scanlines\n - Vignette\n - Greyscale\n - Sepia\n\nOriginal scanlines algorithm by Pat \"Hawthorne\" Shearon.\nhttp://www.truevision3d.com/forums/showcase/staticnoise_colorblackwhite_scanline_shaders-t18698.0.html\n\nOptimized scanlines + noise version with intensity scaling by Georg \"Leviathan\" Steinrohder.\nThis version is provided under a Creative Commons Attribution 3.0 License\nhttp://creativecommons.org/licenses/by/3.0/\n\nThe sepia effect is based on:\n https://github.com/evanw/glfx.js\n\nThe vignette code is based on PaintEffect postprocess from ro.me:\n http://code.google.com/p/3-dreams-of-black/source/browse/deploy/js/effects/PaintEffect.js",
            "is_constructor": 1,
            "extends": "ShaderMaterial",
            "params": [
                {
                    "name": "options",
                    "description": "- The options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "greyscale",
                            "description": "- Enable greyscale effect. Greyscale and sepia are mutually exclusive.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "sepia",
                            "description": "- Enable sepia effect. Greyscale and sepia are mutually exclusive.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "vignette",
                            "description": "- Apply vignette effect.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "eskil",
                            "description": "- Use Eskil's vignette approach. The default looks dusty while Eskil looks burned out.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "scanlines",
                            "description": "- Show scanlines.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "noise",
                            "description": "- Show noise-based film grain.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "noiseIntensity",
                            "description": "- The noise intensity. 0.0 to 1.0.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.5"
                        },
                        {
                            "name": "scanlineIntensity",
                            "description": "- The scanline intensity. 0.0 to 1.0.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.05"
                        },
                        {
                            "name": "greyscaleIntensity",
                            "description": "- The intensity of the greyscale effect.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1.0"
                        },
                        {
                            "name": "sepiaIntensity",
                            "description": "- The intensity of the sepia effect.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1.0"
                        },
                        {
                            "name": "vignetteOffset",
                            "description": "- The offset of the vignette effect.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1.0"
                        },
                        {
                            "name": "vignetteDarkness",
                            "description": "- The darkness of the vignette effect.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1.0"
                        }
                    ]
                }
            ]
        },
        "GlitchMaterial": {
            "name": "GlitchMaterial",
            "shortname": "GlitchMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "postprocessing",
            "file": "src\\materials\\glitch\\index.js",
            "line": 4,
            "description": "A glitch shader material.\nBased on https://github.com/staffantan/unityglitch",
            "is_constructor": 1,
            "extends": "ShaderMaterial"
        },
        "GodRaysMaterial": {
            "name": "GodRaysMaterial",
            "shortname": "GodRaysMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "postprocessing",
            "file": "src\\materials\\god-rays\\index.js",
            "line": 4,
            "description": "A crepuscular rays shader material.\n\nReferences:\n\nThibaut Despoulain, 2012:\n (WebGL) Volumetric Light Approximation in Three.js\n http://bkcore.com/blog/3d/webgl-three-js-volumetric-light-godrays.html\n\nNvidia, GPU Gems 3, 2008:\n Chapter 13. Volumetric Light Scattering as a Post-Process\n http://http.developer.nvidia.com/GPUGems3/gpugems3_ch13.html",
            "is_constructor": 1,
            "extends": "ShaderMaterial"
        },
        "LuminosityMaterial": {
            "name": "LuminosityMaterial",
            "shortname": "LuminosityMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "postprocessing",
            "file": "src\\materials\\luminosity\\index.js",
            "line": 4,
            "description": "A luminance shader material.\n\nThis shader produces a greyscale luminance map. \nIt can also be configured to output colors that are scaled with their \nrespective luminance value. Additionally, a range may be provided to \nmask out undesired texels.\n\nThe alpha channel will remain unaffected in all cases.\n\nLuminance range reference:\n https://cycling74.com/2007/05/23/your-first-shader/#.Vty9FfkrL4Z",
            "is_constructor": 1,
            "extends": "ShaderMaterial",
            "params": [
                {
                    "name": "color",
                    "description": "- Defines whether the shader should output colours scaled with their luminance value.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "range",
                    "description": "- If provided, the shader will mask out texels that aren't in the specified range.",
                    "type": "Vector2",
                    "optional": true
                }
            ]
        },
        "SMAABlendMaterial": {
            "name": "SMAABlendMaterial",
            "shortname": "SMAABlendMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "postprocessing",
            "file": "src\\materials\\smaa-blend\\index.js",
            "line": 4,
            "description": "Subpixel Morphological Antialiasing.\n\nThis material is used to render the final antialiasing.",
            "is_constructor": 1,
            "extends": "ShaderMaterial",
            "params": [
                {
                    "name": "texelSize",
                    "description": "- The absolute screen texel size.",
                    "type": "Vector2",
                    "optional": true
                }
            ]
        },
        "SMAAColorEdgesMaterial": {
            "name": "SMAAColorEdgesMaterial",
            "shortname": "SMAAColorEdgesMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "postprocessing",
            "file": "src\\materials\\smaa-color-edges\\index.js",
            "line": 4,
            "description": "Subpixel Morphological Antialiasing.\n\nThis material detects edges in a color texture.",
            "is_constructor": 1,
            "extends": "ShaderMaterial",
            "params": [
                {
                    "name": "texelSize",
                    "description": "- The absolute screen texel size.",
                    "type": "Vector2",
                    "optional": true
                }
            ]
        },
        "SMAAWeightsMaterial": {
            "name": "SMAAWeightsMaterial",
            "shortname": "SMAAWeightsMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "postprocessing",
            "file": "src\\materials\\smaa-weights\\index.js",
            "line": 6,
            "description": "Subpixel Morphological Antialiasing.\n\nThis material computes weights for detected edges.",
            "is_constructor": 1,
            "extends": "ShaderMaterial",
            "params": [
                {
                    "name": "texelSize",
                    "description": "- The absolute screen texel size.",
                    "type": "Vector2",
                    "optional": true
                }
            ]
        },
        "ToneMappingMaterial": {
            "name": "ToneMappingMaterial",
            "shortname": "ToneMappingMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "postprocessing",
            "file": "src\\materials\\tone-mapping\\index.js",
            "line": 4,
            "description": "Full-screen tone-mapping shader material.\nhttp://www.graphics.cornell.edu/~jaf/publications/sig02_paper.pdf",
            "is_constructor": 1,
            "extends": "ShaderMaterial"
        },
        "BloomPass": {
            "name": "BloomPass",
            "shortname": "BloomPass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "postprocessing",
            "namespace": "",
            "file": "src\\passes\\bloom.js",
            "line": 11,
            "description": "A bloom pass.\n\nThis pass renders a scene with superimposed blur \nby utilising the fast Kawase convolution approach.",
            "is_constructor": 1,
            "extends": "Pass",
            "params": [
                {
                    "name": "options",
                    "description": "- The options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "resolutionScale",
                            "description": "- The render texture resolution scale, relative to the screen render size.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.5"
                        },
                        {
                            "name": "blurriness",
                            "description": "- The scale of the blur.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1.0"
                        },
                        {
                            "name": "strength",
                            "description": "- The bloom strength.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1.0"
                        },
                        {
                            "name": "distinction",
                            "description": "- The luminance distinction factor. Raise this value to bring out the brighter elements in the scene.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1.0"
                        }
                    ]
                }
            ]
        },
        "BokehPass": {
            "name": "BokehPass",
            "shortname": "BokehPass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "postprocessing",
            "namespace": "",
            "file": "src\\passes\\bokeh.js",
            "line": 5,
            "description": "Depth of Field pass using a bokeh shader.",
            "is_constructor": 1,
            "extends": "Pass",
            "params": [
                {
                    "name": "depthTexture",
                    "description": "- A render texture that contains the depth of the scene.",
                    "type": "WebGLRenderTarget"
                },
                {
                    "name": "options",
                    "description": "- Additional parameters.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "focus",
                            "description": "- Focus distance.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1.0"
                        },
                        {
                            "name": "aperture",
                            "description": "- Camera aperture scale. Bigger values for shallower depth of field.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.025"
                        },
                        {
                            "name": "maxBlur",
                            "description": "- Maximum blur strength.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1.0"
                        }
                    ]
                }
            ]
        },
        "ClearMaskPass": {
            "name": "ClearMaskPass",
            "shortname": "ClearMaskPass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "postprocessing",
            "namespace": "",
            "file": "src\\passes\\clear-mask.js",
            "line": 3,
            "description": "A clear mask pass.",
            "is_constructor": 1,
            "extends": "Pass"
        },
        "DotScreenPass": {
            "name": "DotScreenPass",
            "shortname": "DotScreenPass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "postprocessing",
            "namespace": "",
            "file": "src\\passes\\dot-screen.js",
            "line": 5,
            "description": "A render pass.",
            "is_constructor": 1,
            "extends": "Pass",
            "params": [
                {
                    "name": "options",
                    "description": "- The options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "angle",
                            "description": "- The angle of the pattern.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1.57"
                        },
                        {
                            "name": "scale",
                            "description": "- The scale of the overall effect.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1.0"
                        },
                        {
                            "name": "intensity",
                            "description": "- The intensity of the effect.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1.0"
                        },
                        {
                            "name": "average",
                            "description": "- Whether the shader should output a colour average (black and white).",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ]
        },
        "FilmPass": {
            "name": "FilmPass",
            "shortname": "FilmPass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "postprocessing",
            "namespace": "",
            "file": "src\\passes\\film.js",
            "line": 5,
            "description": "A film pass providing various cinematic effects.",
            "is_constructor": 1,
            "extends": "Pass",
            "params": [
                {
                    "name": "options",
                    "description": "- The options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "greyscale",
                            "description": "- Enable greyscale effect. Greyscale and sepia are mutually exclusive.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "sepia",
                            "description": "- Enable sepia effect. Greyscale and sepia are mutually exclusive.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "vignette",
                            "description": "- Apply vignette effect.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "eskil",
                            "description": "- Use Eskil's vignette approach. The default looks dusty while Eskil looks more burned out.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "scanlines",
                            "description": "- Show scanlines.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "noise",
                            "description": "- Show noise-based film grain.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "noiseIntensity",
                            "description": "- The noise intensity. 0.0 to 1.0.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.5"
                        },
                        {
                            "name": "scanlineIntensity",
                            "description": "- The scanline intensity. 0.0 to 1.0.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.05"
                        },
                        {
                            "name": "scanlineDensity",
                            "description": "- The number of scanlines in percent, relative to the screen height.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1.0"
                        },
                        {
                            "name": "greyscaleIntensity",
                            "description": "- The intensity of the greyscale effect.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1.0"
                        },
                        {
                            "name": "sepiaIntensity",
                            "description": "- The intensity of the sepia effect.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1.0"
                        },
                        {
                            "name": "vignetteOffset",
                            "description": "- The offset of the vignette effect.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1.0"
                        },
                        {
                            "name": "vignetteDarkness",
                            "description": "- The darkness of the vignette effect.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1.0"
                        }
                    ]
                }
            ]
        },
        "GlitchPass": {
            "name": "GlitchPass",
            "shortname": "GlitchPass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "postprocessing",
            "namespace": "",
            "file": "src\\passes\\glitch.js",
            "line": 5,
            "description": "A glitch pass.",
            "is_constructor": 1,
            "extends": "Pass",
            "params": [
                {
                    "name": "options",
                    "description": "- The options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "perturbMap",
                            "description": "- A perturbation map.",
                            "type": "Texture",
                            "optional": true
                        },
                        {
                            "name": "dtSize",
                            "description": "- The size of the generated noise map. Will be ignored if a perturbation map is provided.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "64"
                        }
                    ]
                }
            ]
        },
        "GodRaysPass": {
            "name": "GodRaysPass",
            "shortname": "GodRaysPass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "postprocessing",
            "namespace": "",
            "file": "src\\passes\\god-rays.js",
            "line": 23,
            "description": "A crepuscular rays pass.",
            "is_constructor": 1,
            "extends": "Pass",
            "params": [
                {
                    "name": "scene",
                    "description": "- The main scene.",
                    "type": "Scene"
                },
                {
                    "name": "camera",
                    "description": "- The main camera.",
                    "type": "Camera"
                },
                {
                    "name": "lightSource",
                    "description": "- The main light source.",
                    "type": "Vector3"
                },
                {
                    "name": "options",
                    "description": "- The options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "density",
                            "description": "- The density of the light rays.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.96"
                        },
                        {
                            "name": "decay",
                            "description": "- An illumination decay factor.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.93"
                        },
                        {
                            "name": "weight",
                            "description": "- A light ray weight factor.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.4"
                        },
                        {
                            "name": "exposure",
                            "description": "- A constant attenuation coefficient.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.6"
                        },
                        {
                            "name": "clampMax",
                            "description": "- An upper bound for the saturation of the overall effect.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1.0"
                        },
                        {
                            "name": "intensity",
                            "description": "- A constant factor for additive blending.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1.0"
                        },
                        {
                            "name": "blurriness",
                            "description": "- The strength of the preliminary blur phase.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.1"
                        },
                        {
                            "name": "resolutionScale",
                            "description": "- The render texture resolution scale, relative to the screen render size.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.5"
                        },
                        {
                            "name": "samples",
                            "description": "- The number of samples per pixel.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "60"
                        }
                    ]
                }
            ]
        },
        "MaskPass": {
            "name": "MaskPass",
            "shortname": "MaskPass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "postprocessing",
            "namespace": "",
            "file": "src\\passes\\mask.js",
            "line": 3,
            "description": "A mask pass.",
            "is_constructor": 1,
            "extends": "Pass",
            "params": [
                {
                    "name": "scene",
                    "description": "- The scene to render.",
                    "type": "Scene"
                },
                {
                    "name": "camera",
                    "description": "- The camera to use to render the scene.",
                    "type": "Camera"
                }
            ]
        },
        "Pass": {
            "name": "Pass",
            "shortname": "Pass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "postprocessing",
            "namespace": "",
            "file": "src\\passes\\pass.js",
            "line": 3,
            "description": "An abstract pass.\n\nThis class implements a dispose method that frees memory on demand.\nThe EffectComposer calls this method when it is being destroyed.\n\nFor this mechanism to work properly, please assign your render targets, \nmaterials or textures directly to your pass!\n\nYou can prevent your disposable objects from being deleted by keeping them \ninside deeper structures such as arrays or objects.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "- The scene to render.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "camera",
                    "description": "- The camera will be added to the given scene if it has no parent.",
                    "type": "Camera",
                    "optional": true
                },
                {
                    "name": "quad",
                    "description": "- A quad that fills the screen. Used for rendering a pure 2D effect. Set this to null, if you don't need it (see RenderPass).",
                    "type": "Mesh",
                    "optional": true
                }
            ]
        },
        "RenderPass": {
            "name": "RenderPass",
            "shortname": "RenderPass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "postprocessing",
            "namespace": "",
            "file": "src\\passes\\render.js",
            "line": 15,
            "description": "A pass that renders a given scene directly on screen\nor into the read buffer for further processing.\n\nIn addition to that, this pass can also render a depth \ntexture which may be used by other passes.",
            "is_constructor": 1,
            "extends": "Pass",
            "params": [
                {
                    "name": "scene",
                    "description": "- The scene to render.",
                    "type": "Scene"
                },
                {
                    "name": "camera",
                    "description": "- The camera to use to render the scene.",
                    "type": "Camera"
                },
                {
                    "name": "options",
                    "description": "- Additional options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "depth",
                            "description": "- Indicates whether this pass should also render a scene depth texture.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "depthResolutionScale",
                            "description": "- The resolution scale of the depth texture, relative to the main render size.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "0.5"
                        },
                        {
                            "name": "overrideMaterial",
                            "description": "- An override material for the scene.",
                            "type": "Material",
                            "optional": true
                        },
                        {
                            "name": "clearColor",
                            "description": "- An override clear color.",
                            "type": "Color",
                            "optional": true
                        },
                        {
                            "name": "clearAlpha",
                            "description": "- An override clear alpha.",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "SavePass": {
            "name": "SavePass",
            "shortname": "SavePass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "postprocessing",
            "namespace": "",
            "file": "src\\passes\\save.js",
            "line": 5,
            "description": "A save pass that renders the result from a previous \npass (read buffer) to an arbitrary render target.",
            "is_constructor": 1,
            "extends": "Pass",
            "params": [
                {
                    "name": "renderTarget",
                    "description": "- The render target to use for saving the read buffer.",
                    "type": "Scene"
                },
                {
                    "name": "resize",
                    "description": "- Whether the render target should adjust to the size of the read/write buffer.",
                    "type": "Boolean",
                    "optional": true
                }
            ]
        },
        "ShaderPass": {
            "name": "ShaderPass",
            "shortname": "ShaderPass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "postprocessing",
            "namespace": "",
            "file": "src\\passes\\shader.js",
            "line": 4,
            "description": "A shader pass.\n\nUsed to render any shader material as a 2D filter.",
            "is_constructor": 1,
            "extends": "Pass",
            "params": [
                {
                    "name": "material",
                    "description": "- The shader material to use.",
                    "type": "ShaderMaterial"
                },
                {
                    "name": "textureID",
                    "description": "- The texture uniform identifier.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"tDiffuse\""
                }
            ]
        },
        "SMAAPass": {
            "name": "SMAAPass",
            "shortname": "SMAAPass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "postprocessing",
            "namespace": "",
            "file": "src\\passes\\smaa.js",
            "line": 10,
            "description": "Subpixel Morphological Antialiasing (SMAA) v2.8.\n\nPreset: SMAA 1x Medium (with color edge detection).\n https://github.com/iryoku/smaa/releases/tag/v2.8",
            "is_constructor": 1,
            "extends": "Pass",
            "params": [
                {
                    "name": "Image",
                    "description": "- This pass requires an Image class to create internal textures. Provide window.Image in a browser environment!",
                    "type": "Image"
                }
            ]
        },
        "ToneMappingPass": {
            "name": "ToneMappingPass",
            "shortname": "ToneMappingPass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "postprocessing",
            "namespace": "",
            "file": "src\\passes\\tone-mapping.js",
            "line": 11,
            "description": "A tone mapping pass that supports adaptive luminosity.\n\nIf adaptivity is enabled, this pass generates a texture that represents \nthe luminosity of the current scene and adjusts it over time to simulate \nthe optic nerve responding to the amount of light it is receiving.\n\nReference:\n GDC2007 - Wolfgang Engel, Post-Processing Pipeline\n http://www.graphics.cornell.edu/~jaf/publications/sig02_paper.pdf",
            "is_constructor": 1,
            "extends": "Pass",
            "params": [
                {
                    "name": "options",
                    "description": "- The options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "adaptive",
                            "description": "- Whether the tone mapping should use an adaptive luminance map.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "resolution",
                            "description": "- The render texture resolution.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "256"
                        },
                        {
                            "name": "distinction",
                            "description": "- A luminance distinction factor.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1.0"
                        }
                    ]
                }
            ]
        },
        "EffectComposer": {
            "name": "EffectComposer",
            "shortname": "EffectComposer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "postprocessing",
            "namespace": "",
            "file": "src\\effect-composer.js",
            "line": 10,
            "description": "The EffectComposer may be used in place of a normal WebGLRenderer.\n\nIt will disable the auto clear behaviour of the provided renderer to prevent \nunnecessary clear operations.\n\nYou may want to use a RenderPass as your first pass to automatically clear \nthe screen and render the scene to a texture for further processing.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "renderer",
                    "description": "- A renderer that should be used for rendering the passes.",
                    "type": "WebGLRenderer",
                    "optional": true
                },
                {
                    "name": "renderTarget",
                    "description": "- A pre-configured render target to use as a read/write buffer.",
                    "type": "WebGLRenderTarget",
                    "optional": true
                }
            ]
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "src\\materials\\convolution\\index.js",
            "line": 43,
            "description": "The Kawase blur kernels for five consecutive convolution passes.\nThe result matches the 35x35 Gauss filter.",
            "itemtype": "property",
            "name": "kernels",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "class": "ConvolutionMaterial"
        },
        {
            "file": "src\\materials\\convolution\\index.js",
            "line": 54,
            "description": "Scales the kernels.",
            "itemtype": "property",
            "name": "scale",
            "type": "Number",
            "default": "1.0",
            "class": "ConvolutionMaterial"
        },
        {
            "file": "src\\materials\\convolution\\index.js",
            "line": 64,
            "description": "The current kernel.",
            "itemtype": "property",
            "name": "currentKernel",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "class": "ConvolutionMaterial"
        },
        {
            "file": "src\\materials\\convolution\\index.js",
            "line": 78,
            "description": "Sets the texel size.",
            "itemtype": "method",
            "name": "setTexelSize",
            "params": [
                {
                    "name": "x",
                    "description": "- The texel width.",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "- The texel height.",
                    "type": "Number"
                }
            ],
            "class": "ConvolutionMaterial"
        },
        {
            "file": "src\\materials\\convolution\\index.js",
            "line": 93,
            "description": "Adjusts the kernel for the next blur pass.\nCall this method before each render iteration.",
            "itemtype": "method",
            "name": "adjustKernel",
            "class": "ConvolutionMaterial"
        },
        {
            "file": "src\\materials\\smaa-weights\\index.js",
            "line": 49,
            "description": "The area pattern recognition image.",
            "itemtype": "property",
            "name": "areaImage",
            "type": "String",
            "class": "SMAAWeightsMaterial"
        },
        {
            "file": "src\\materials\\smaa-weights\\index.js",
            "line": 58,
            "description": "The search image.",
            "itemtype": "property",
            "name": "searchImage",
            "type": "String",
            "class": "SMAAWeightsMaterial"
        },
        {
            "file": "src\\passes\\bloom.js",
            "line": 35,
            "description": "A render target.",
            "itemtype": "property",
            "name": "renderTargetX",
            "type": "WebGLRenderTarget",
            "access": "private",
            "tagname": "",
            "class": "BloomPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\bloom.js",
            "line": 51,
            "description": "A second render target.",
            "itemtype": "property",
            "name": "renderTargetY",
            "type": "WebGLRenderTarget",
            "access": "private",
            "tagname": "",
            "class": "BloomPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\bloom.js",
            "line": 61,
            "description": "The resolution scale.\n\nYou need to call the setSize method of the EffectComposer after \nchanging this value.",
            "itemtype": "property",
            "name": "resolutionScale",
            "type": "Number",
            "default": "0.5",
            "class": "BloomPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\bloom.js",
            "line": 74,
            "description": "Combine shader material.",
            "itemtype": "property",
            "name": "combineMaterial",
            "type": "CombineMaterial",
            "access": "private",
            "tagname": "",
            "class": "BloomPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\bloom.js",
            "line": 86,
            "description": "Copy shader material.",
            "itemtype": "property",
            "name": "copyMaterial",
            "type": "CopyMaterial",
            "access": "private",
            "tagname": "",
            "class": "BloomPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\bloom.js",
            "line": 100,
            "description": "Luminance shader material.",
            "itemtype": "property",
            "name": "luminosityMaterial",
            "type": "LuminosityMaterial",
            "access": "private",
            "tagname": "",
            "class": "BloomPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\bloom.js",
            "line": 112,
            "description": "Convolution shader material.",
            "itemtype": "property",
            "name": "convolutionMaterial",
            "type": "ConvolutionMaterial",
            "access": "private",
            "tagname": "",
            "class": "BloomPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\bloom.js",
            "line": 126,
            "description": "The strength of the preliminary blur phase.",
            "itemtype": "property",
            "name": "blurriness",
            "type": "Number",
            "default": "1.0",
            "class": "BloomPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\bloom.js",
            "line": 146,
            "description": "Renders the effect.\n\nApplies a luminance filter and convolution blur to the read buffer and \nrenders the result into a seperate render target. The result is additively \nblended with the read buffer.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "renderer",
                    "description": "- The renderer to use.",
                    "type": "WebGLRenderer"
                },
                {
                    "name": "readBuffer",
                    "description": "- The read buffer.",
                    "type": "WebGLRenderTarget"
                }
            ],
            "class": "BloomPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\bloom.js",
            "line": 208,
            "description": "Adjusts the format and size of the render targets.",
            "itemtype": "method",
            "name": "initialise",
            "params": [
                {
                    "name": "renderer",
                    "description": "- The renderer.",
                    "type": "WebGLRenderer"
                },
                {
                    "name": "alpha",
                    "description": "- Whether the renderer uses the alpha channel or not.",
                    "type": "Boolean"
                }
            ],
            "class": "BloomPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\bloom.js",
            "line": 230,
            "description": "Updates this pass with the renderer's size.",
            "itemtype": "method",
            "name": "setSize",
            "params": [
                {
                    "name": "width",
                    "description": "- The width.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "- The height.",
                    "type": "Number"
                }
            ],
            "class": "BloomPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\bokeh.js",
            "line": 28,
            "description": "Bokeh shader material.",
            "itemtype": "property",
            "name": "bokehMaterial",
            "type": "BokehMaterial",
            "access": "private",
            "tagname": "",
            "class": "BokehPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\bokeh.js",
            "line": 44,
            "description": "Renders the effect.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "renderer",
                    "description": "- The renderer to use.",
                    "type": "WebGLRenderer"
                },
                {
                    "name": "readBuffer",
                    "description": "- The read buffer.",
                    "type": "WebGLRenderTarget"
                },
                {
                    "name": "writeBuffer",
                    "description": "- The write buffer.",
                    "type": "WebGLRenderTarget"
                }
            ],
            "class": "BokehPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\bokeh.js",
            "line": 69,
            "description": "Adjusts the format and size of the render targets.",
            "itemtype": "method",
            "name": "initialise",
            "params": [
                {
                    "name": "renderer",
                    "description": "- The renderer.",
                    "type": "WebGLRenderer"
                },
                {
                    "name": "alpha",
                    "description": "- Whether the renderer uses the alpha channel or not.",
                    "type": "Boolean"
                }
            ],
            "class": "BokehPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\bokeh.js",
            "line": 84,
            "description": "Updates this pass with the renderer's size.",
            "itemtype": "method",
            "name": "setSize",
            "params": [
                {
                    "name": "width",
                    "description": "- The width.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "- The height.",
                    "type": "Number"
                }
            ],
            "class": "BokehPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\clear-mask.js",
            "line": 19,
            "description": "This pass disables the stencil test.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "renderer",
                    "description": "- The renderer to use.",
                    "type": "WebGLRenderer"
                }
            ],
            "class": "ClearMaskPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\dot-screen.js",
            "line": 28,
            "description": "Dot screen shader material description.",
            "itemtype": "property",
            "name": "material",
            "type": "DotScreenMaterial",
            "access": "private",
            "tagname": "",
            "class": "DotScreenPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\dot-screen.js",
            "line": 46,
            "description": "Renders the effect.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "renderer",
                    "description": "- The renderer to use.",
                    "type": "WebGLRenderer"
                },
                {
                    "name": "readBuffer",
                    "description": "- The read buffer.",
                    "type": "WebGLRenderTarget"
                },
                {
                    "name": "writeBuffer",
                    "description": "- The write buffer.",
                    "type": "WebGLRenderTarget"
                }
            ],
            "class": "DotScreenPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\dot-screen.js",
            "line": 71,
            "description": "Adjusts the size of the effect.",
            "itemtype": "method",
            "name": "initialise",
            "params": [
                {
                    "name": "renderer",
                    "description": "- The renderer.",
                    "type": "WebGLRenderer"
                }
            ],
            "class": "DotScreenPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\dot-screen.js",
            "line": 85,
            "description": "Updates this pass with the renderer's size.",
            "itemtype": "method",
            "name": "setSize",
            "params": [
                {
                    "name": "width",
                    "description": "- The width.",
                    "type": "Number"
                },
                {
                    "name": "heght",
                    "description": "- The height.",
                    "type": "Number"
                }
            ],
            "class": "DotScreenPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\film.js",
            "line": 37,
            "description": "Film shader material.",
            "itemtype": "property",
            "name": "material",
            "type": "FilmMaterial",
            "access": "private",
            "tagname": "",
            "class": "FilmPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\film.js",
            "line": 49,
            "description": "The amount of scanlines in percent, relative to the screen height.\n\nYou need to call the setSize method of the EffectComposer after \nchanging this value.",
            "itemtype": "property",
            "name": "scanlineDensity",
            "type": "Number",
            "default": "1.25",
            "class": "FilmPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\film.js",
            "line": 64,
            "description": "Renders the effect.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "renderer",
                    "description": "- The renderer to use.",
                    "type": "WebGLRenderer"
                },
                {
                    "name": "readBuffer",
                    "description": "- The read buffer.",
                    "type": "WebGLRenderTarget"
                },
                {
                    "name": "writeBuffer",
                    "description": "- The write buffer.",
                    "type": "WebGLRenderTarget"
                },
                {
                    "name": "delta",
                    "description": "- The render delta time.",
                    "type": "Number"
                }
            ],
            "class": "FilmPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\film.js",
            "line": 91,
            "description": "Adjusts the scanline count using the renderer's height.",
            "itemtype": "method",
            "name": "initialise",
            "params": [
                {
                    "name": "renderer",
                    "description": "- The renderer.",
                    "type": "WebGLRenderer"
                }
            ],
            "class": "FilmPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\film.js",
            "line": 105,
            "description": "Adjusts the scanline count using the renderer's height.",
            "itemtype": "method",
            "name": "setSize",
            "params": [
                {
                    "name": "width",
                    "description": "- The width.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "- The height.",
                    "type": "Number"
                }
            ],
            "class": "FilmPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\glitch.js",
            "line": 27,
            "description": "Glitch shader material.",
            "itemtype": "property",
            "name": "material",
            "type": "GlitchMaterial",
            "access": "private",
            "tagname": "",
            "class": "GlitchPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\glitch.js",
            "line": 39,
            "description": "A perturbation map.\n\nIf none is provided, a noise texture will be created.\nThe texture will automatically be destroyed when the \nEffectComposer is deleted.",
            "itemtype": "property",
            "name": "perturbMap",
            "type": "Texture",
            "class": "GlitchPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\glitch.js",
            "line": 63,
            "description": "The effect mode.\n\nCheck the Mode enumeration for available modes.",
            "itemtype": "property",
            "name": "mode",
            "type": "GlitchPass.Mode",
            "default": "GlitchPass.Mode.SPORADIC",
            "class": "GlitchPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\glitch.js",
            "line": 75,
            "description": "Counter for glitch activation/deactivation.",
            "itemtype": "property",
            "name": "counter",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "class": "GlitchPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\glitch.js",
            "line": 85,
            "description": "A random break point for the sporadic glitch activation.",
            "itemtype": "property",
            "name": "breakPoint",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "class": "GlitchPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\glitch.js",
            "line": 98,
            "description": "Renders the effect.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "renderer",
                    "description": "- The renderer to use.",
                    "type": "WebGLRenderer"
                },
                {
                    "name": "readBuffer",
                    "description": "- The read buffer.",
                    "type": "WebGLRenderTarget"
                },
                {
                    "name": "writeBuffer",
                    "description": "- The write buffer.",
                    "type": "WebGLRenderTarget"
                }
            ],
            "class": "GlitchPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\glitch.js",
            "line": 155,
            "description": "Creates a random break point for the glitch effect.",
            "itemtype": "method",
            "name": "generateTrigger",
            "class": "GlitchPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\glitch.js",
            "line": 167,
            "description": "Destroys the currently set texture, if any, and \ngenerates a simple noise map.",
            "itemtype": "method",
            "name": "generatePerturbMap",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "size",
                    "description": "- The texture size.",
                    "type": "Number"
                }
            ],
            "class": "GlitchPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\glitch.js",
            "line": 203,
            "description": "A glitch mode enumeration.\n\nSPORADIC is the default mode (randomly timed glitches).",
            "itemtype": "property",
            "name": "GlitchPass.Mode",
            "type": "Object",
            "static": 1,
            "final": 1,
            "class": "GlitchPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\god-rays.js",
            "line": 11,
            "description": "Used for saving the original clear color during \nthe rendering process of the masked scene.",
            "itemtype": "property",
            "name": "clearColor",
            "type": "Color",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "GodRaysPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\god-rays.js",
            "line": 52,
            "description": "A render target for rendering the masked scene.",
            "itemtype": "property",
            "name": "renderTargetMask",
            "type": "WebGLRenderTarget",
            "access": "private",
            "tagname": "",
            "class": "GodRaysPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\god-rays.js",
            "line": 66,
            "description": "A render target.",
            "itemtype": "property",
            "name": "renderTargetX",
            "type": "WebGLRenderTarget",
            "access": "private",
            "tagname": "",
            "class": "GodRaysPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\god-rays.js",
            "line": 78,
            "description": "A second render target.",
            "itemtype": "property",
            "name": "renderTargetY",
            "type": "WebGLRenderTarget",
            "access": "private",
            "tagname": "",
            "class": "GodRaysPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\god-rays.js",
            "line": 88,
            "description": "The resolution scale.\n\nYou need to call the setSize method of the EffectComposer \nafter changing this value.",
            "itemtype": "property",
            "name": "resolutionScale",
            "type": "Number",
            "default": "0.5",
            "class": "GodRaysPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\god-rays.js",
            "line": 101,
            "description": "The light source.",
            "itemtype": "property",
            "name": "lightSource",
            "type": "Object3D",
            "class": "GodRaysPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\god-rays.js",
            "line": 110,
            "description": "The light position in screen space.",
            "itemtype": "property",
            "name": "screenPosition",
            "type": "Vector3",
            "access": "private",
            "tagname": "",
            "class": "GodRaysPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\god-rays.js",
            "line": 120,
            "description": "A convolution blur shader material.",
            "itemtype": "property",
            "name": "convolutionMaterial",
            "type": "ConvolutionMaterial",
            "access": "private",
            "tagname": "",
            "class": "GodRaysPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\god-rays.js",
            "line": 132,
            "description": "A combine shader material used for rendering to screen.",
            "itemtype": "property",
            "name": "combineMaterial",
            "type": "CombineMaterial",
            "access": "private",
            "tagname": "",
            "class": "GodRaysPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\god-rays.js",
            "line": 142,
            "description": "A copy shader material used for rendering to texture.",
            "itemtype": "property",
            "name": "copyMaterial",
            "type": "CopyMaterial",
            "access": "private",
            "tagname": "",
            "class": "GodRaysPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\god-rays.js",
            "line": 154,
            "description": "A material used for masking the scene objects.",
            "itemtype": "property",
            "name": "maskMaterial",
            "type": "MeshBasicMaterial",
            "access": "private",
            "tagname": "",
            "class": "GodRaysPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\god-rays.js",
            "line": 164,
            "description": "God rays shader material.",
            "itemtype": "property",
            "name": "godRaysMaterial",
            "type": "GodRaysMaterial",
            "access": "private",
            "tagname": "",
            "class": "GodRaysPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\god-rays.js",
            "line": 184,
            "description": "The main scene.",
            "itemtype": "property",
            "name": "mainScene",
            "type": "Scene",
            "class": "GodRaysPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\god-rays.js",
            "line": 193,
            "description": "The main camera.",
            "itemtype": "property",
            "name": "mainCamera",
            "type": "Camera",
            "class": "GodRaysPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\god-rays.js",
            "line": 204,
            "description": "The strength of the preliminary blur phase.",
            "itemtype": "property",
            "name": "blurriness",
            "type": "Number",
            "default": "0.1",
            "class": "GodRaysPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\god-rays.js",
            "line": 224,
            "description": "The overall intensity of the effect.",
            "itemtype": "property",
            "name": "intensity",
            "type": "Number",
            "default": "1.0",
            "class": "GodRaysPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\god-rays.js",
            "line": 245,
            "description": "The number of samples per pixel.\n\nThis value must be carefully chosen. A higher value increases the \nGPU load directly and doesn't necessarily yield better results!",
            "itemtype": "property",
            "name": "samples",
            "type": "Number",
            "default": "60",
            "class": "GodRaysPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\god-rays.js",
            "line": 272,
            "description": "Renders the scene.\n\nThe read buffer is assumed to contain the normally rendered scene.\nThe god rays pass has four phases with a total of 8 render steps.\n\nMask Phase:\n The scene is rendered using a mask material.\n\nPrelminiary Blur Phase:\n The masked scene is blurred five consecutive times.\n\nGod Rays Phase:\n The blurred scene is blurred again, but this time along radial lines towards the light source.\n\nComposite Phase:\n The final result is added to the normal scene.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "renderer",
                    "description": "- The renderer to use.",
                    "type": "WebGLRenderer"
                },
                {
                    "name": "readBuffer",
                    "description": "- The read buffer.",
                    "type": "WebGLRenderTarget"
                }
            ],
            "class": "GodRaysPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\god-rays.js",
            "line": 361,
            "description": "Adjusts the format and size of the render targets.",
            "itemtype": "method",
            "name": "initialise",
            "params": [
                {
                    "name": "renderer",
                    "description": "- The renderer.",
                    "type": "WebGLRenderer"
                },
                {
                    "name": "alpha",
                    "description": "- Whether the renderer uses the alpha channel or not.",
                    "type": "Boolean"
                }
            ],
            "class": "GodRaysPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\god-rays.js",
            "line": 384,
            "description": "Updates this pass with the renderer's size.",
            "itemtype": "method",
            "name": "setSize",
            "params": [
                {
                    "name": "width",
                    "description": "- The width.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "- The height.",
                    "type": "Number"
                }
            ],
            "class": "GodRaysPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\mask.js",
            "line": 19,
            "description": "Inverse flag.",
            "itemtype": "property",
            "name": "inverse",
            "type": "Boolean",
            "default": "false",
            "class": "MaskPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\mask.js",
            "line": 29,
            "description": "Clear flag.",
            "itemtype": "property",
            "name": "clear",
            "type": "Boolean",
            "default": "true",
            "class": "MaskPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\mask.js",
            "line": 41,
            "description": "Renders the scene as a mask by only setting the stencil bits.\nThe buffers will both be cleared first.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "renderer",
                    "description": "- The renderer to use.",
                    "type": "WebGLRenderer"
                },
                {
                    "name": "readBuffer",
                    "description": "- The read buffer containing the result of the previous pass.",
                    "type": "WebGLRenderTarget"
                },
                {
                    "name": "readBuffer",
                    "description": "- The write buffer.",
                    "type": "WebGLRenderTarget"
                }
            ],
            "class": "MaskPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\pass.js",
            "line": 26,
            "description": "The scene to render.",
            "itemtype": "property",
            "name": "scene",
            "type": "Scene",
            "access": "private",
            "tagname": "",
            "default": "Scene()",
            "class": "Pass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\pass.js",
            "line": 37,
            "description": "The camera to render with.",
            "itemtype": "property",
            "name": "camera",
            "type": "Camera",
            "access": "private",
            "tagname": "",
            "default": "OrthographicCamera(-1, 1, 1, -1, 0, 1)",
            "class": "Pass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\pass.js",
            "line": 48,
            "description": "The quad mesh to use for rendering.\n\nAssign your shader material to this mesh!",
            "itemtype": "property",
            "name": "quad",
            "type": "Mesh",
            "access": "private",
            "tagname": "",
            "default": "Mesh(PlaneBufferGeometry(2, 2), null)",
            "example": [
                "\n this.quad.material = this.myMaterial;"
            ],
            "class": "Pass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\pass.js",
            "line": 63,
            "description": "Indicates whether the read and write buffers should be swapped after this \npass has finished rendering.\n\nSet this to true if this pass renders to the write buffer so that a \nfollowing pass can find the result in the read buffer.",
            "itemtype": "property",
            "name": "needsSwap",
            "type": "Boolean",
            "access": "private",
            "tagname": "",
            "default": "false",
            "class": "Pass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\pass.js",
            "line": 78,
            "description": "Enabled flag.",
            "itemtype": "property",
            "name": "enabled",
            "type": "Boolean",
            "default": "true",
            "class": "Pass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\pass.js",
            "line": 88,
            "description": "Render to screen flag.",
            "itemtype": "property",
            "name": "renderToScreen",
            "type": "Boolean",
            "default": "false",
            "class": "Pass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\pass.js",
            "line": 108,
            "description": "Renders the effect.\n\nThis is an abstract method that must be overridden.",
            "itemtype": "method",
            "name": "render",
            "throws": {
                "description": "An error is thrown if the method is not overridden.",
                "type": "Error"
            },
            "params": [
                {
                    "name": "renderer",
                    "description": "- The renderer to use.",
                    "type": "WebGLRenderer"
                },
                {
                    "name": "readBuffer",
                    "description": "- A read buffer. Contains the result of the previous pass.",
                    "type": "WebGLRenderTarget"
                },
                {
                    "name": "writeBuffer",
                    "description": "- A write buffer. Normally used as the render target.",
                    "type": "WebGLRenderTarget"
                },
                {
                    "name": "delta",
                    "description": "- The delta time.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "maskActive",
                    "description": "- Indicates whether a stencil test mask is active or not.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "Pass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\pass.js",
            "line": 128,
            "description": "Performs initialisation tasks.\n\nBy implementing this abstract method you gain access to the renderer.\nYou'll also be able to configure your custom render targets to use the \nappropriate format (RGB or RGBA).\n\nThe provided renderer can be used to warm up special off-screen render \ntargets by performing a preliminary render operation.\n\nThe effect composer calls this method when this pass is first added.",
            "itemtype": "method",
            "name": "initialise",
            "params": [
                {
                    "name": "renderer",
                    "description": "- The renderer.",
                    "type": "WebGLRenderer"
                },
                {
                    "name": "alpha",
                    "description": "- Whether the renderer uses the alpha channel or not.",
                    "type": "Boolean"
                }
            ],
            "class": "Pass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\pass.js",
            "line": 147,
            "description": "Updates this pass with the renderer's size.\n\nThis is an abstract method that may be overriden in case you want to be \ninformed about the main render size.\n\nThe effect composer calls this method when its own size is updated.",
            "itemtype": "method",
            "name": "setSize",
            "params": [
                {
                    "name": "width",
                    "description": "- The renderer's width.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "- The renderer's height.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n this.myRenderTarget.setSize(width, height);"
            ],
            "class": "Pass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\pass.js",
            "line": 164,
            "description": "Performs a shallow search for properties that define a dispose method and \ndeletes them. The pass will be inoperative after this method was called!\n\nDisposable objects:\n - render targets\n - materials\n - textures\n\nThe EffectComposer calls this method automatically when it is being\ndestroyed. You may, however, use it independently to free memory \nwhen you are certain that you don't need this pass anymore.",
            "itemtype": "method",
            "name": "dispose",
            "class": "Pass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\render.js",
            "line": 4,
            "description": "Used for saving the original clear color during rendering.",
            "itemtype": "property",
            "name": "clearColor",
            "type": "Color",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "RenderPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\render.js",
            "line": 43,
            "description": "Depth render flag.",
            "itemtype": "property",
            "name": "depth",
            "type": "Boolean",
            "default": "false",
            "class": "RenderPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\render.js",
            "line": 53,
            "description": "The depth texture.",
            "itemtype": "property",
            "name": "depthTexture",
            "type": "WebGLRenderTarget",
            "class": "RenderPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\render.js",
            "line": 66,
            "description": "A depth shader material.",
            "itemtype": "property",
            "name": "MeshDepthMaterial",
            "type": "Material",
            "access": "private",
            "tagname": "",
            "class": "RenderPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\render.js",
            "line": 76,
            "description": "The resolution scale of the depth texture, relative to the main \nrender size.\n\nYou need to call the setSize method of the EffectComposer after \nchanging this value.",
            "itemtype": "property",
            "name": "depthResolutionScale",
            "type": "Number",
            "default": "0.5",
            "class": "RenderPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\render.js",
            "line": 90,
            "description": "Override material.",
            "itemtype": "property",
            "name": "overrideMaterial",
            "type": "Material",
            "class": "RenderPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\render.js",
            "line": 99,
            "description": "Clear color.",
            "itemtype": "property",
            "name": "clearColor",
            "type": "Color",
            "class": "RenderPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\render.js",
            "line": 108,
            "description": "Clear alpha.",
            "itemtype": "property",
            "name": "clearAlpha",
            "type": "Number",
            "class": "RenderPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\render.js",
            "line": 117,
            "description": "Clear flag.",
            "itemtype": "property",
            "name": "clear",
            "type": "Boolean",
            "default": "true",
            "class": "RenderPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\render.js",
            "line": 129,
            "description": "Renders the scene.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "renderer",
                    "description": "- The renderer to use.",
                    "type": "WebGLRenderer"
                },
                {
                    "name": "readBuffer",
                    "description": "- The read buffer.",
                    "type": "WebGLRenderTarget"
                }
            ],
            "class": "RenderPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\render.js",
            "line": 179,
            "description": "Adjusts the format and size of the depth render target.",
            "itemtype": "method",
            "name": "initialise",
            "params": [
                {
                    "name": "renderer",
                    "description": "- The renderer.",
                    "type": "WebGLRenderer"
                },
                {
                    "name": "alpha",
                    "description": "- Whether the renderer uses the alpha channel or not.",
                    "type": "Boolean"
                }
            ],
            "class": "RenderPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\render.js",
            "line": 206,
            "description": "Updates the depth render target with the renderer's size.",
            "itemtype": "method",
            "name": "setSize",
            "params": [
                {
                    "name": "width",
                    "description": "- The width.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "- The height.",
                    "type": "Number"
                }
            ],
            "class": "RenderPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\save.js",
            "line": 22,
            "description": "Copy shader material.",
            "itemtype": "property",
            "name": "material",
            "type": "CopyMaterial",
            "access": "private",
            "tagname": "",
            "class": "SavePass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\save.js",
            "line": 34,
            "description": "The render target.",
            "itemtype": "property",
            "name": "renderTarget",
            "type": "WebGLRenderTarget",
            "access": "private",
            "tagname": "",
            "class": "SavePass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\save.js",
            "line": 44,
            "description": "Indicates whether the render target should be resized when\nthe size of the composer's read/write buffer changes.",
            "itemtype": "property",
            "name": "resize",
            "type": "Boolean",
            "default": "true",
            "class": "SavePass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\save.js",
            "line": 57,
            "description": "Saves the read buffer.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "renderer",
                    "description": "- The renderer to use.",
                    "type": "WebGLRenderer"
                },
                {
                    "name": "readBuffer",
                    "description": "- The read buffer.",
                    "type": "WebGLRenderTarget"
                }
            ],
            "class": "SavePass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\save.js",
            "line": 72,
            "description": "Updates this pass with the renderer's size.",
            "itemtype": "method",
            "name": "setSize",
            "params": [
                {
                    "name": "width",
                    "description": "- The width.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "- The height.",
                    "type": "Number"
                }
            ],
            "class": "SavePass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\shader.js",
            "line": 24,
            "description": "The name of the color sampler uniform of the given material.\nThe read buffer will be bound to this.",
            "itemtype": "property",
            "name": "textureID",
            "type": "String",
            "default": "\"tDiffuse\"",
            "class": "ShaderPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\shader.js",
            "line": 35,
            "description": "The shader material to use for rendering.",
            "itemtype": "property",
            "name": "material",
            "type": "ShaderMaterial",
            "class": "ShaderPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\shader.js",
            "line": 48,
            "description": "Renders the effect.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "renderer",
                    "description": "- The renderer to use.",
                    "type": "WebGLRenderer"
                },
                {
                    "name": "buffer",
                    "description": "- The read/write buffer.",
                    "type": "WebGLRenderTarget"
                }
            ],
            "class": "ShaderPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\smaa.js",
            "line": 30,
            "description": "A render target for the color edge detection.",
            "itemtype": "property",
            "name": "renderTargetColorEdges",
            "type": "WebGLRenderTarget",
            "access": "private",
            "tagname": "",
            "class": "SMAAPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\smaa.js",
            "line": 46,
            "description": "A render target for the SMAA weights.",
            "itemtype": "property",
            "name": "renderTargetWeights",
            "type": "Material",
            "access": "private",
            "tagname": "",
            "class": "SMAAPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\smaa.js",
            "line": 58,
            "description": "SMAA color edge detection shader material.",
            "itemtype": "property",
            "name": "colorEdgesMaterial",
            "type": "SMAAColorEdgesMaterial",
            "access": "private",
            "tagname": "",
            "class": "SMAAPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\smaa.js",
            "line": 68,
            "description": "SMAA weights shader material.",
            "itemtype": "property",
            "name": "weightsMaterial",
            "type": "SMAAWeightsMaterial",
            "access": "private",
            "tagname": "",
            "class": "SMAAPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\smaa.js",
            "line": 104,
            "description": "SMAA blend shader material.",
            "itemtype": "property",
            "name": "blendMaterial",
            "type": "SMAABlendMaterial",
            "access": "private",
            "tagname": "",
            "class": "SMAAPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\smaa.js",
            "line": 120,
            "description": "Antialiases the scene.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "renderer",
                    "description": "- The renderer to use.",
                    "type": "WebGLRenderer"
                },
                {
                    "name": "readBuffer",
                    "description": "- The read buffer.",
                    "type": "WebGLRenderTarget"
                },
                {
                    "name": "writeBuffer",
                    "description": "- The write buffer.",
                    "type": "WebGLRenderTarget"
                }
            ],
            "class": "SMAAPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\smaa.js",
            "line": 156,
            "description": "Adjusts the format and size of the render targets.",
            "itemtype": "method",
            "name": "initialise",
            "params": [
                {
                    "name": "renderer",
                    "description": "- The renderer.",
                    "type": "WebGLRenderer"
                },
                {
                    "name": "alpha",
                    "description": "- Whether the renderer uses the alpha channel or not.",
                    "type": "Boolean"
                }
            ],
            "class": "SMAAPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\smaa.js",
            "line": 171,
            "description": "Updates this pass with the renderer's size.",
            "itemtype": "method",
            "name": "setSize",
            "params": [
                {
                    "name": "width",
                    "description": "- The width.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "- The height.",
                    "type": "Number"
                }
            ],
            "class": "SMAAPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\tone-mapping.js",
            "line": 41,
            "description": "Render target for the current limonosity.",
            "itemtype": "property",
            "name": "renderTargetLuminosity",
            "type": "WebGLRenderTarget",
            "access": "private",
            "tagname": "",
            "class": "ToneMappingPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\tone-mapping.js",
            "line": 57,
            "description": "Adapted luminance render target.",
            "itemtype": "property",
            "name": "renderTargetLuminosity",
            "type": "WebGLRenderTarget",
            "access": "private",
            "tagname": "",
            "class": "ToneMappingPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\tone-mapping.js",
            "line": 70,
            "description": "Render target that holds a copy of the adapted limonosity.",
            "itemtype": "property",
            "name": "renderTargetX",
            "type": "WebGLRenderTarget",
            "access": "private",
            "tagname": "",
            "class": "ToneMappingPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\tone-mapping.js",
            "line": 80,
            "description": "Copy shader material used for saving the luminance map.",
            "itemtype": "property",
            "name": "copyMaterial",
            "type": "CopyMaterial",
            "access": "private",
            "tagname": "",
            "class": "ToneMappingPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\tone-mapping.js",
            "line": 90,
            "description": "Luminosity shader material.",
            "itemtype": "property",
            "name": "luminosityMaterial",
            "type": "LuminosityMaterial",
            "access": "private",
            "tagname": "",
            "class": "ToneMappingPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\tone-mapping.js",
            "line": 102,
            "description": "Adaptive luminance shader material.",
            "itemtype": "property",
            "name": "adaptiveLuminosityMaterial",
            "type": "AdaptiveLuminosityMaterial",
            "access": "private",
            "tagname": "",
            "class": "ToneMappingPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\tone-mapping.js",
            "line": 114,
            "description": "Tone mapping shader material.",
            "itemtype": "property",
            "name": "toneMappingMaterial",
            "type": "ToneMappingMaterial",
            "access": "private",
            "tagname": "",
            "class": "ToneMappingPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\tone-mapping.js",
            "line": 128,
            "description": "The resolution of the render targets. Must be a power of two for mipmapping.",
            "itemtype": "property",
            "name": "resolution",
            "type": "Number",
            "default": "256",
            "class": "ToneMappingPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\tone-mapping.js",
            "line": 153,
            "description": "Whether this pass uses adaptive luminosity.",
            "itemtype": "property",
            "name": "adaptive",
            "type": "Boolean",
            "class": "ToneMappingPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\tone-mapping.js",
            "line": 180,
            "description": "Renders the effect.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "renderer",
                    "description": "- The renderer to use.",
                    "type": "WebGLRenderer"
                },
                {
                    "name": "readBuffer",
                    "description": "- The read buffer.",
                    "type": "WebGLRenderTarget"
                },
                {
                    "name": "writeBuffer",
                    "description": "- The write buffer.",
                    "type": "WebGLRenderTarget"
                },
                {
                    "name": "delta",
                    "description": "- The render delta time.",
                    "type": "Number"
                }
            ],
            "class": "ToneMappingPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\tone-mapping.js",
            "line": 229,
            "description": "Renders something into the previous luminosity texture.",
            "itemtype": "method",
            "name": "initialise",
            "params": [
                {
                    "name": "renderer",
                    "description": "- The renderer.",
                    "type": "WebGLRenderer"
                }
            ],
            "class": "ToneMappingPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\effect-composer.js",
            "line": 29,
            "description": "The renderer.",
            "itemtype": "property",
            "name": "renderer",
            "type": "WebGLRenderer",
            "class": "EffectComposer",
            "module": "postprocessing"
        },
        {
            "file": "src\\effect-composer.js",
            "line": 39,
            "description": "The read buffer.\n\nReading from and writing to the same render target should be avoided. \nTherefore, two seperate, yet identical buffers are used.",
            "itemtype": "property",
            "name": "readBuffer",
            "type": "WebGLRenderTarget",
            "access": "private",
            "tagname": "",
            "class": "EffectComposer",
            "module": "postprocessing"
        },
        {
            "file": "src\\effect-composer.js",
            "line": 54,
            "description": "The write buffer.",
            "itemtype": "property",
            "name": "writeBuffer",
            "type": "WebGLRenderTarget",
            "access": "private",
            "tagname": "",
            "class": "EffectComposer",
            "module": "postprocessing"
        },
        {
            "file": "src\\effect-composer.js",
            "line": 64,
            "description": "A copy pass used to copy masked scenes.",
            "itemtype": "property",
            "name": "copyPass",
            "type": "ShaderPass",
            "access": "private",
            "tagname": "",
            "class": "EffectComposer",
            "module": "postprocessing"
        },
        {
            "file": "src\\effect-composer.js",
            "line": 74,
            "description": "The render passes.",
            "itemtype": "property",
            "name": "passes",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "EffectComposer",
            "module": "postprocessing"
        },
        {
            "file": "src\\effect-composer.js",
            "line": 86,
            "description": "Creates a new render target by replicating the renderer's canvas.",
            "itemtype": "method",
            "name": "createBuffer",
            "return": {
                "description": "A fresh render target that equals the renderer's canvas.",
                "type": "WebGLRenderTarget"
            },
            "class": "EffectComposer",
            "module": "postprocessing"
        },
        {
            "file": "src\\effect-composer.js",
            "line": 107,
            "description": "Adds a pass, optionally at a specific index.",
            "itemtype": "method",
            "name": "addPass",
            "params": [
                {
                    "name": "pass",
                    "description": "- A new pass.",
                    "type": "Pass"
                },
                {
                    "name": "index",
                    "description": "- An index at which the pass should be inserted.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "EffectComposer",
            "module": "postprocessing"
        },
        {
            "file": "src\\effect-composer.js",
            "line": 131,
            "description": "Removes a pass.",
            "itemtype": "method",
            "name": "removePass",
            "params": [
                {
                    "name": "pass",
                    "description": "- The pass.",
                    "type": "Pass"
                }
            ],
            "class": "EffectComposer",
            "module": "postprocessing"
        },
        {
            "file": "src\\effect-composer.js",
            "line": 144,
            "description": "Renders all enabled passes in the order in which they were added.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "delta",
                    "description": "- The time between the last frame and the current one.",
                    "type": "Number"
                }
            ],
            "class": "EffectComposer",
            "module": "postprocessing"
        },
        {
            "file": "src\\effect-composer.js",
            "line": 200,
            "description": "Sets the size of the render targets and the output canvas.\n\nEvery pass will be informed of the new size. It's up to each pass how that \ninformation is used.\n\nIf no width or height is specified, the render targets and passes will be \nupdated with the current size.",
            "itemtype": "method",
            "name": "setSize",
            "params": [
                {
                    "name": "width",
                    "description": "- The width.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "height",
                    "description": "- The height.",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "EffectComposer",
            "module": "postprocessing"
        },
        {
            "file": "src\\effect-composer.js",
            "line": 233,
            "description": "Resets this composer by deleting all passes and creating new buffers.",
            "itemtype": "method",
            "name": "reset",
            "params": [
                {
                    "name": "renderTarget",
                    "description": "- A new render target to use. If none is provided, the settings of the old buffers will be used.",
                    "type": "WebGLRenderTarget",
                    "optional": true
                }
            ],
            "class": "EffectComposer",
            "module": "postprocessing"
        },
        {
            "file": "src\\effect-composer.js",
            "line": 246,
            "description": "Destroys all passes and render targets.\n\nThis method deallocates all render targets, textures and materials created \nby the passes. It also deletes this composer's frame buffers.\n\nNote: the reset method uses the dispose method internally.",
            "itemtype": "method",
            "name": "dispose",
            "params": [
                {
                    "name": "renderTarget",
                    "description": "- A new render target. If none is provided, the composer will become inoperative.",
                    "type": "WebGLRenderTarget",
                    "optional": true
                }
            ],
            "class": "EffectComposer",
            "module": "postprocessing"
        }
    ],
    "warnings": [
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src\\materials\\luminosity\\index.js:4"
        },
        {
            "message": "replacing incorrect tag: params with param",
            "line": " src\\materials\\luminosity\\index.js:4"
        }
    ]
}