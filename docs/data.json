{
    "project": {
        "name": "postprocessing",
        "description": "A post processing library that provides the means to implement 2D filter effects for three.js.",
        "version": "0.1.1",
        "url": "https://github.com/vanruesc/postprocessing"
    },
    "files": {
        "src\\materials\\adaptive-luminosity\\index.js": {
            "name": "src\\materials\\adaptive-luminosity\\index.js",
            "modules": {},
            "classes": {
                "AdaptiveLuminosityMaterial": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\materials\\bokeh\\index.js": {
            "name": "src\\materials\\bokeh\\index.js",
            "modules": {},
            "classes": {
                "BokehMaterial": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\materials\\combine\\index.js": {
            "name": "src\\materials\\combine\\index.js",
            "modules": {},
            "classes": {
                "CombineMaterial": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\materials\\convolution\\index.js": {
            "name": "src\\materials\\convolution\\index.js",
            "modules": {},
            "classes": {
                "ConvolutionMaterial": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\materials\\copy\\index.js": {
            "name": "src\\materials\\copy\\index.js",
            "modules": {},
            "classes": {
                "CopyMaterial": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\materials\\dot-screen\\index.js": {
            "name": "src\\materials\\dot-screen\\index.js",
            "modules": {},
            "classes": {
                "DotScreenMaterial": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\materials\\film\\index.js": {
            "name": "src\\materials\\film\\index.js",
            "modules": {},
            "classes": {
                "FilmMaterial": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\materials\\glitch\\index.js": {
            "name": "src\\materials\\glitch\\index.js",
            "modules": {},
            "classes": {
                "GlitchMaterial": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\materials\\god-rays\\index.js": {
            "name": "src\\materials\\god-rays\\index.js",
            "modules": {},
            "classes": {
                "GodRaysMaterial": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\materials\\luminosity\\index.js": {
            "name": "src\\materials\\luminosity\\index.js",
            "modules": {},
            "classes": {
                "LuminosityMaterial": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\materials\\tone-mapping\\index.js": {
            "name": "src\\materials\\tone-mapping\\index.js",
            "modules": {},
            "classes": {
                "ToneMappingMaterial": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\materials\\index.js": {
            "name": "src\\materials\\index.js",
            "modules": {
                "materials": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\passes\\adaptive-tone-mapping.js": {
            "name": "src\\passes\\adaptive-tone-mapping.js",
            "modules": {},
            "classes": {
                "AdaptiveToneMappingPass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\passes\\bloom.js": {
            "name": "src\\passes\\bloom.js",
            "modules": {},
            "classes": {
                "BloomPass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\passes\\bokeh.js": {
            "name": "src\\passes\\bokeh.js",
            "modules": {},
            "classes": {
                "BokehPass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\passes\\clear-mask.js": {
            "name": "src\\passes\\clear-mask.js",
            "modules": {},
            "classes": {
                "ClearMaskPass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\passes\\dot-screen.js": {
            "name": "src\\passes\\dot-screen.js",
            "modules": {},
            "classes": {
                "DotScreenPass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\passes\\film.js": {
            "name": "src\\passes\\film.js",
            "modules": {},
            "classes": {
                "FilmPass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\passes\\glitch.js": {
            "name": "src\\passes\\glitch.js",
            "modules": {},
            "classes": {
                "GlitchPass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\passes\\god-rays.js": {
            "name": "src\\passes\\god-rays.js",
            "modules": {},
            "classes": {
                "GodRaysPass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\passes\\index.js": {
            "name": "src\\passes\\index.js",
            "modules": {
                "passes": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\passes\\mask.js": {
            "name": "src\\passes\\mask.js",
            "modules": {},
            "classes": {
                "MaskPass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\passes\\pass.js": {
            "name": "src\\passes\\pass.js",
            "modules": {},
            "classes": {
                "Pass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\passes\\render.js": {
            "name": "src\\passes\\render.js",
            "modules": {},
            "classes": {
                "RenderPass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\passes\\save.js": {
            "name": "src\\passes\\save.js",
            "modules": {},
            "classes": {
                "SavePass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\passes\\shader.js": {
            "name": "src\\passes\\shader.js",
            "modules": {},
            "classes": {
                "ShaderPass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\passes\\texture.js": {
            "name": "src\\passes\\texture.js",
            "modules": {},
            "classes": {
                "TexturePass": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\effect-composer.js": {
            "name": "src\\effect-composer.js",
            "modules": {},
            "classes": {
                "EffectComposer": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src\\index.js": {
            "name": "src\\index.js",
            "modules": {
                "postprocessing": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "postprocessing": {
            "name": "postprocessing",
            "submodules": {
                "materials": 1,
                "passes": 1
            },
            "elements": {},
            "classes": {
                "AdaptiveLuminosityMaterial": 1,
                "BokehMaterial": 1,
                "CombineMaterial": 1,
                "ConvolutionMaterial": 1,
                "CopyMaterial": 1,
                "DotScreenMaterial": 1,
                "FilmMaterial": 1,
                "GlitchMaterial": 1,
                "GodRaysMaterial": 1,
                "LuminosityMaterial": 1,
                "ToneMappingMaterial": 1,
                "AdaptiveToneMappingPass": 1,
                "BloomPass": 1,
                "BokehPass": 1,
                "ClearMaskPass": 1,
                "DotScreenPass": 1,
                "FilmPass": 1,
                "GlitchPass": 1,
                "GodRaysPass": 1,
                "MaskPass": 1,
                "Pass": 1,
                "RenderPass": 1,
                "SavePass": 1,
                "ShaderPass": 1,
                "TexturePass": 1,
                "EffectComposer": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src\\effect-composer.js",
            "line": 5,
            "description": "Exposure of the library components."
        },
        "materials": {
            "name": "materials",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "postprocessing",
            "namespace": "",
            "file": "src\\materials\\index.js",
            "line": 1,
            "description": "A compilation of the shader materials that are used \nin the post processing passes."
        },
        "passes": {
            "name": "passes",
            "submodules": {},
            "elements": {},
            "classes": {},
            "fors": {},
            "is_submodule": 1,
            "namespaces": {},
            "module": "postprocessing",
            "namespace": "",
            "file": "src\\passes\\index.js",
            "line": 1,
            "description": "A compilation of the post processing passes."
        }
    },
    "classes": {
        "AdaptiveLuminosityMaterial": {
            "name": "AdaptiveLuminosityMaterial",
            "shortname": "AdaptiveLuminosityMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "postprocessing",
            "file": "src\\materials\\adaptive-luminosity\\index.js",
            "line": 4,
            "description": "An adaptive luminosity shader material.",
            "is_constructor": 1,
            "extends": "ShaderMaterial"
        },
        "BokehMaterial": {
            "name": "BokehMaterial",
            "shortname": "BokehMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "postprocessing",
            "file": "src\\materials\\bokeh\\index.js",
            "line": 4,
            "description": "Depth-of-field shader with bokeh ported from GLSL shader by Martins Upitis.\nhttp://blenderartists.org/forum/showthread.php?237488-GLSL-depth-of-field-with-bokeh-v2-4-(update)",
            "is_constructor": 1,
            "extends": "ShaderMaterial"
        },
        "CombineMaterial": {
            "name": "CombineMaterial",
            "shortname": "CombineMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "postprocessing",
            "file": "src\\materials\\combine\\index.js",
            "line": 4,
            "description": "A material for combining two textures.",
            "is_constructor": 1,
            "extends": "ShaderMaterial",
            "params": [
                {
                    "name": "invertTexture1",
                    "description": "- Invert the first texture's rgb values.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                },
                {
                    "name": "invertTexture2",
                    "description": "- Invert the second texture's rgb values.",
                    "type": "Boolean",
                    "optional": true,
                    "optdefault": "false"
                }
            ]
        },
        "ConvolutionMaterial": {
            "name": "ConvolutionMaterial",
            "shortname": "ConvolutionMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "postprocessing",
            "file": "src\\materials\\convolution\\index.js",
            "line": 4,
            "description": "A convolution blur shader material.\n\nUse this shader five times in a row while adjusting the kernel \nbefore each render call in order to get the same result as with \na 35x35 Gauss filter.\n\nImplementation based on the GDC2003 Presentation by Masaki Kawase, Bunkasha Games:\nFrame Buffer Postprocessing Effects in DOUBLE-S.T.E.A.L (Wreckless)\n\nFurther modified according to:\n https://developer.apple.com/library/ios/documentation/3DDrawing/Conceptual/\n OpenGLES_ProgrammingGuide/BestPracticesforShaders/BestPracticesforShaders.html#//\n apple_ref/doc/uid/TP40008793-CH7-SW15",
            "is_constructor": 1,
            "extends": "ShaderMaterial",
            "params": [
                {
                    "name": "texelSize",
                    "description": "- The absolute screen texel size.",
                    "type": "Vector2"
                }
            ]
        },
        "CopyMaterial": {
            "name": "CopyMaterial",
            "shortname": "CopyMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "postprocessing",
            "file": "src\\materials\\copy\\index.js",
            "line": 4,
            "description": "A simple copy shader material.",
            "is_constructor": 1,
            "extends": "ShaderMaterial"
        },
        "DotScreenMaterial": {
            "name": "DotScreenMaterial",
            "shortname": "DotScreenMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "postprocessing",
            "file": "src\\materials\\dot-screen\\index.js",
            "line": 4,
            "description": "A dot screen shader material.",
            "is_constructor": 1,
            "extends": "ShaderMaterial"
        },
        "FilmMaterial": {
            "name": "FilmMaterial",
            "shortname": "FilmMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "postprocessing",
            "file": "src\\materials\\film\\index.js",
            "line": 4,
            "description": "Film grain & scanlines shader\n\n- ported from HLSL to WebGL / GLSL\nhttp://www.truevision3d.com/forums/showcase/staticnoise_colorblackwhite_scanline_shaders-t18698.0.html\n\nScreen Space Static Postprocessor\n\nProduces an analogue noise overlay similar to a film grain / TV static\n\nOriginal implementation and noise algorithm\nPat \"Hawthorne\" Shearon\n\nOptimized scanlines + noise version with intensity scaling\nGeorg \"Leviathan\" Steinrohder\n\nThis version is provided under a Creative Commons Attribution 3.0 License\nhttp://creativecommons.org/licenses/by/3.0/",
            "is_constructor": 1,
            "extends": "ShaderMaterial"
        },
        "GlitchMaterial": {
            "name": "GlitchMaterial",
            "shortname": "GlitchMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "postprocessing",
            "file": "src\\materials\\glitch\\index.js",
            "line": 4,
            "description": "A glitch shader material.\nBased on https://github.com/staffantan/unityglitch",
            "is_constructor": 1,
            "extends": "ShaderMaterial"
        },
        "GodRaysMaterial": {
            "name": "GodRaysMaterial",
            "shortname": "GodRaysMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "postprocessing",
            "file": "src\\materials\\god-rays\\index.js",
            "line": 4,
            "description": "A crepuscular rays shader material.\n\nReferences:\n\nThibaut Despoulain, 2012:\n (WebGL) Volumetric Light Approximation in Three.js\n http://bkcore.com/blog/3d/webgl-three-js-volumetric-light-godrays.html\n\nNvidia, GPU Gems 3 - Chapter 13:\n Volumetric Light Scattering as a Post-Process\n http://http.developer.nvidia.com/GPUGems3/gpugems3_ch13.html",
            "is_constructor": 1,
            "extends": "ShaderMaterial"
        },
        "LuminosityMaterial": {
            "name": "LuminosityMaterial",
            "shortname": "LuminosityMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "postprocessing",
            "file": "src\\materials\\luminosity\\index.js",
            "line": 4,
            "description": "A luminosity shader material.\nhttp://en.wikipedia.org/wiki/Luminosity",
            "is_constructor": 1,
            "extends": "ShaderMaterial"
        },
        "ToneMappingMaterial": {
            "name": "ToneMappingMaterial",
            "shortname": "ToneMappingMaterial",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "postprocessing",
            "file": "src\\materials\\tone-mapping\\index.js",
            "line": 4,
            "description": "Full-screen tone-mapping shader material.\nhttp://www.graphics.cornell.edu/~jaf/publications/sig02_paper.pdf",
            "is_constructor": 1,
            "extends": "ShaderMaterial"
        },
        "AdaptiveToneMappingPass": {
            "name": "AdaptiveToneMappingPass",
            "shortname": "AdaptiveToneMappingPass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "postprocessing",
            "namespace": "",
            "file": "src\\passes\\adaptive-tone-mapping.js",
            "line": 11,
            "description": "Generates a texture that represents the luminosity of the current scene, adapted over time\nto simulate the optic nerve responding to the amount of light it is receiving.\nBased on a GDC2007 presentation by Wolfgang Engel titled \"Post-Processing Pipeline\"\n\nFull-screen tone-mapping shader based on http://www.graphics.cornell.edu/~jaf/publications/sig02_paper.pdf",
            "is_constructor": 1,
            "extends": "Pass",
            "params": [
                {
                    "name": "adaptive",
                    "description": "- Adaptivity flag.",
                    "type": "Boolean"
                },
                {
                    "name": "opacity",
                    "description": "- The resolution.",
                    "type": "Number",
                    "optional": true
                }
            ]
        },
        "BloomPass": {
            "name": "BloomPass",
            "shortname": "BloomPass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "postprocessing",
            "namespace": "",
            "file": "src\\passes\\bloom.js",
            "line": 11,
            "description": "A bloom pass.\n\nThis pass renders a scene with superimposed blur \nby utilising the fast Kawase convolution approach.",
            "is_constructor": 1,
            "extends": "Pass",
            "params": [
                {
                    "name": "options",
                    "description": "- The options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "resolutionScale",
                            "description": "- The render texture resolution scale, relative to the screen render size.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.5"
                        },
                        {
                            "name": "blurriness",
                            "description": "- The scale of the blur kernels.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1.0"
                        },
                        {
                            "name": "strength",
                            "description": "- The bloom strength.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1.0"
                        }
                    ]
                }
            ]
        },
        "BokehPass": {
            "name": "BokehPass",
            "shortname": "BokehPass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "postprocessing",
            "namespace": "",
            "file": "src\\passes\\bokeh.js",
            "line": 5,
            "description": "Depth-of-field pass using a bokeh shader.",
            "is_constructor": 1,
            "extends": "Pass",
            "params": [
                {
                    "name": "scene",
                    "description": "- The scene to render.",
                    "type": "Scene"
                },
                {
                    "name": "camera",
                    "description": "- The camera to use to render the scene.",
                    "type": "Camera"
                },
                {
                    "name": "options",
                    "description": "- Additional parameters.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "focus",
                            "description": "- The focus.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "aspect",
                            "description": "- The aspect.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "aperture",
                            "description": "- The aperture.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "maxBlur",
                            "description": "- The maximum blur.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "resolution",
                            "description": "- The render resolution.",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "ClearMaskPass": {
            "name": "ClearMaskPass",
            "shortname": "ClearMaskPass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "postprocessing",
            "namespace": "",
            "file": "src\\passes\\clear-mask.js",
            "line": 3,
            "description": "A clear mask pass.",
            "is_constructor": 1,
            "extends": "Pass"
        },
        "DotScreenPass": {
            "name": "DotScreenPass",
            "shortname": "DotScreenPass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "postprocessing",
            "namespace": "",
            "file": "src\\passes\\dot-screen.js",
            "line": 5,
            "description": "A render pass.",
            "is_constructor": 1,
            "extends": "Pass",
            "params": [
                {
                    "name": "options",
                    "description": "- The options.",
                    "type": "Object",
                    "optional": true
                },
                {
                    "name": "patternSize",
                    "description": "- The pattern size.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1.0"
                },
                {
                    "name": "angle",
                    "description": "- The angle of the pattern.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1.57"
                },
                {
                    "name": "scale",
                    "description": "- The scale of the overall effect.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1.0"
                }
            ]
        },
        "FilmPass": {
            "name": "FilmPass",
            "shortname": "FilmPass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "postprocessing",
            "namespace": "",
            "file": "src\\passes\\film.js",
            "line": 5,
            "description": "A film pass providing scan lines, greyscale and noise effects.",
            "is_constructor": 1,
            "extends": "Pass",
            "params": [
                {
                    "name": "options",
                    "description": "- The options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "grayscale",
                            "description": "- Convert to greyscale.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "noiseIntensity",
                            "description": "- The noise intensity. 0.0 to 1.0.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.5"
                        },
                        {
                            "name": "scanlinesIntensity",
                            "description": "- The scanline intensity. 0.0 to 1.0.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.05"
                        },
                        {
                            "name": "scanlinesCount",
                            "description": "- The number of scanlines. 0.0 to 4096.0.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "4096.0"
                        }
                    ]
                }
            ]
        },
        "GlitchPass": {
            "name": "GlitchPass",
            "shortname": "GlitchPass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "postprocessing",
            "namespace": "",
            "file": "src\\passes\\glitch.js",
            "line": 5,
            "description": "A glitch pass.",
            "is_constructor": 1,
            "extends": "Pass",
            "params": [
                {
                    "name": "options",
                    "description": "- The options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "perturbMap",
                            "description": "- A perturbation map.",
                            "type": "Texture",
                            "optional": true
                        },
                        {
                            "name": "dtSize",
                            "description": "- The size of the generated noise map.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "64"
                        }
                    ]
                }
            ]
        },
        "GodRaysPass": {
            "name": "GodRaysPass",
            "shortname": "GodRaysPass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "postprocessing",
            "namespace": "",
            "file": "src\\passes\\god-rays.js",
            "line": 11,
            "description": "A crepuscular rays pass.",
            "is_constructor": 1,
            "extends": "Pass",
            "params": [
                {
                    "name": "scene",
                    "description": "- The main scene.",
                    "type": "Scene"
                },
                {
                    "name": "camera",
                    "description": "- The main camera.",
                    "type": "Camera"
                },
                {
                    "name": "lightSource",
                    "description": "- The main light source.",
                    "type": "Vector3"
                },
                {
                    "name": "options",
                    "description": "- The options.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "density",
                            "description": "- The density of the light rays.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.96"
                        },
                        {
                            "name": "decay",
                            "description": "- An illumination decay factor.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.93"
                        },
                        {
                            "name": "weight",
                            "description": "- A light ray weight factor.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.4"
                        },
                        {
                            "name": "exposure",
                            "description": "- A constant attenuation coefficient.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.6"
                        },
                        {
                            "name": "clampMax",
                            "description": "- An upper bound for the saturation of the overall effect.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1.0"
                        },
                        {
                            "name": "intensity",
                            "description": "- A constant factor for additive blending.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "1.0"
                        },
                        {
                            "name": "blurriness",
                            "description": "- The strength of the preliminary blur phase.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.1"
                        },
                        {
                            "name": "resolutionScale",
                            "description": "- The render texture resolution scale, relative to the screen render size.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0.5"
                        },
                        {
                            "name": "samples",
                            "description": "- The number of samples per pixel.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "60"
                        }
                    ]
                }
            ]
        },
        "MaskPass": {
            "name": "MaskPass",
            "shortname": "MaskPass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "postprocessing",
            "namespace": "",
            "file": "src\\passes\\mask.js",
            "line": 3,
            "description": "A mask pass.",
            "is_constructor": 1,
            "extends": "Pass",
            "params": [
                {
                    "name": "scene",
                    "description": "- The scene to render.",
                    "type": "Scene"
                },
                {
                    "name": "camera",
                    "description": "- The camera to use to render the scene.",
                    "type": "Camera"
                }
            ]
        },
        "Pass": {
            "name": "Pass",
            "shortname": "Pass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "postprocessing",
            "namespace": "",
            "file": "src\\passes\\pass.js",
            "line": 3,
            "description": "An abstract pass.\n\nThis class implements a dispose method that frees memory on demand.\nThe EffectComposer calls this method when it is being destroyed.\n\nFor this mechanism to work properly, please assign your render targets, \nmaterials or textures directly to your pass!\n\nYou can prevent your disposable objects from being deleted by keeping \nthem inside deeper structures such as arrays or objects.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "scene",
                    "description": "- The scene to render.",
                    "type": "Scene",
                    "optional": true
                },
                {
                    "name": "camera",
                    "description": "- The camera will be added to the given scene if it has no parent.",
                    "type": "Camera",
                    "optional": true
                },
                {
                    "name": "quad",
                    "description": "- A quad that fills the screen. Used for rendering a pure 2D effect. Set this to null, if you don't need it.",
                    "type": "Mesh",
                    "optional": true
                }
            ]
        },
        "RenderPass": {
            "name": "RenderPass",
            "shortname": "RenderPass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "postprocessing",
            "namespace": "",
            "file": "src\\passes\\render.js",
            "line": 4,
            "description": "A pass that renders a given scene directly on screen\nor into the readBuffer for further processing.",
            "is_constructor": 1,
            "extends": "Pass",
            "params": [
                {
                    "name": "scene",
                    "description": "- The scene to render.",
                    "type": "Scene"
                },
                {
                    "name": "camera",
                    "description": "- The camera to use to render the scene.",
                    "type": "Camera"
                },
                {
                    "name": "overrideMaterial",
                    "description": "- An override material for the scene.",
                    "type": "Material",
                    "optional": true
                },
                {
                    "name": "clearColor",
                    "description": "- A clear color.",
                    "type": "Color",
                    "optional": true
                },
                {
                    "name": "clearAlpha",
                    "description": "- A clear alpha value.",
                    "type": "Number",
                    "optional": true
                }
            ]
        },
        "SavePass": {
            "name": "SavePass",
            "shortname": "SavePass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "postprocessing",
            "namespace": "",
            "file": "src\\passes\\save.js",
            "line": 5,
            "description": "A save pass that renders the result from a previous \npass (readBuffer) to an arbitrary render target.",
            "is_constructor": 1,
            "extends": "Pass",
            "params": [
                {
                    "name": "renderTarget",
                    "description": "- The render target to use for saving the read buffer.",
                    "type": "Scene",
                    "optional": true
                }
            ]
        },
        "ShaderPass": {
            "name": "ShaderPass",
            "shortname": "ShaderPass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "postprocessing",
            "namespace": "",
            "file": "src\\passes\\shader.js",
            "line": 4,
            "description": "A shader pass.\n\nUsed to render any shader material as a 2D filter.",
            "is_constructor": 1,
            "extends": "Pass",
            "params": [
                {
                    "name": "material",
                    "description": "- The shader material to use.",
                    "type": "ShaderMaterial"
                },
                {
                    "name": "textureID",
                    "description": "- The texture uniform identifier.",
                    "type": "String",
                    "optional": true,
                    "optdefault": "\"tDiffuse\""
                }
            ]
        },
        "TexturePass": {
            "name": "TexturePass",
            "shortname": "TexturePass",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "postprocessing",
            "namespace": "",
            "file": "src\\passes\\texture.js",
            "line": 5,
            "description": "A texture pass.\n\nThis pass doesn't destroy the given texture when it's being disposed.",
            "is_constructor": 1,
            "extends": "Pass",
            "params": [
                {
                    "name": "texture",
                    "description": "- The texture.",
                    "type": "Texture"
                },
                {
                    "name": "opacity",
                    "description": "- The opacity to apply to the texture.",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1.0"
                }
            ]
        },
        "EffectComposer": {
            "name": "EffectComposer",
            "shortname": "EffectComposer",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "postprocessing",
            "namespace": "",
            "file": "src\\effect-composer.js",
            "line": 5,
            "description": "The EffectComposer may be used in place of a normal WebGLRenderer.\n\nThe composer will disable the auto clear behaviour of the provided \nrenderer in order to prevent unnecessary clear operations.\n\nYou may want to use a RenderPass as your first pass to automatically \nclear the screen and render the scene to a texture for further processing.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "renderer",
                    "description": "- The pre-configured renderer that should be used for rendering the passes.",
                    "type": "WebGLRenderer",
                    "optional": true
                },
                {
                    "name": "renderTarget",
                    "description": "- A pre-configured render target to use for the post processing.",
                    "type": "WebGLRenderTarget",
                    "optional": true
                }
            ]
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "src\\materials\\convolution\\index.js",
            "line": 43,
            "description": "The Kawase blur kernels for five consecutive convolution passes.\nThe result matches the 35x35 Gauss filter.",
            "itemtype": "property",
            "name": "kernels",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "class": "ConvolutionMaterial"
        },
        {
            "file": "src\\materials\\convolution\\index.js",
            "line": 54,
            "description": "Scales the kernels.",
            "itemtype": "property",
            "name": "blurriness",
            "type": "Number",
            "default": "1.0",
            "class": "ConvolutionMaterial"
        },
        {
            "file": "src\\materials\\convolution\\index.js",
            "line": 64,
            "description": "The current kernel.",
            "itemtype": "property",
            "name": "i",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "class": "ConvolutionMaterial"
        },
        {
            "file": "src\\materials\\convolution\\index.js",
            "line": 82,
            "description": "Sets the texel size.",
            "itemtype": "method",
            "name": "setTexelSize",
            "params": [
                {
                    "name": "texelSize",
                    "description": "- The new texel size.",
                    "type": "Vector2"
                }
            ],
            "class": "ConvolutionMaterial"
        },
        {
            "file": "src\\materials\\convolution\\index.js",
            "line": 100,
            "description": "Adjusts the kernel for the next blur pass.\nCall this method before each render iteration.",
            "itemtype": "method",
            "name": "adjustKernel",
            "class": "ConvolutionMaterial"
        },
        {
            "file": "src\\passes\\adaptive-tone-mapping.js",
            "line": 29,
            "description": "Render resolution.",
            "itemtype": "property",
            "name": "adaptive",
            "type": "Number",
            "default": "256",
            "class": "AdaptiveToneMappingPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\adaptive-tone-mapping.js",
            "line": 39,
            "description": "Adaptivity flag.",
            "itemtype": "property",
            "name": "adaptive",
            "type": "Boolean",
            "default": "false",
            "class": "AdaptiveToneMappingPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\adaptive-tone-mapping.js",
            "line": 49,
            "description": "Initialisation flag.",
            "itemtype": "property",
            "name": "needsInit",
            "type": "Boolean",
            "default": "true",
            "class": "AdaptiveToneMappingPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\adaptive-tone-mapping.js",
            "line": 59,
            "description": "Luminance render target.",
            "itemtype": "property",
            "name": "luminanceRT",
            "type": "WebGLRenderTarget",
            "access": "private",
            "tagname": "",
            "class": "AdaptiveToneMappingPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\adaptive-tone-mapping.js",
            "line": 69,
            "description": "Previous luminance render target.",
            "itemtype": "property",
            "name": "previousLuminanceRT",
            "type": "WebGLRenderTarget",
            "access": "private",
            "tagname": "",
            "class": "AdaptiveToneMappingPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\adaptive-tone-mapping.js",
            "line": 79,
            "description": "Current luminance render target.",
            "itemtype": "property",
            "name": "currentLuminanceRT",
            "type": "WebGLRenderTarget",
            "access": "private",
            "tagname": "",
            "class": "AdaptiveToneMappingPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\adaptive-tone-mapping.js",
            "line": 89,
            "description": "Copy shader material.",
            "itemtype": "property",
            "name": "materialCopy",
            "type": "CopyMaterial",
            "access": "private",
            "tagname": "",
            "class": "AdaptiveToneMappingPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\adaptive-tone-mapping.js",
            "line": 101,
            "description": "Luminance shader material.",
            "itemtype": "property",
            "name": "materialLuminance",
            "type": "LuminosityMaterial",
            "access": "private",
            "tagname": "",
            "class": "AdaptiveToneMappingPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\adaptive-tone-mapping.js",
            "line": 112,
            "description": "Adaptive luminance shader material.",
            "itemtype": "property",
            "name": "materialAdaptiveLuminosity",
            "type": "AdaptiveLuminosityMaterial",
            "access": "private",
            "tagname": "",
            "class": "AdaptiveToneMappingPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\adaptive-tone-mapping.js",
            "line": 124,
            "description": "Tone mapping shader material.",
            "itemtype": "property",
            "name": "materialToneMapping",
            "type": "ToneMappingMaterial",
            "access": "private",
            "tagname": "",
            "class": "AdaptiveToneMappingPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\adaptive-tone-mapping.js",
            "line": 143,
            "description": "Renders the scene.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "renderer",
                    "description": "- The renderer to use.",
                    "type": "WebGLRenderer"
                },
                {
                    "name": "writeBuffer",
                    "description": "- The write buffer.",
                    "type": "WebGLRenderTarget"
                },
                {
                    "name": "readBuffer",
                    "description": "- The read buffer.",
                    "type": "WebGLRenderTarget"
                },
                {
                    "name": "delta",
                    "description": "- The render delta time.",
                    "type": "Number"
                }
            ],
            "class": "AdaptiveToneMappingPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\adaptive-tone-mapping.js",
            "line": 192,
            "description": "Resets this pass.",
            "itemtype": "method",
            "name": "reset",
            "params": [
                {
                    "name": "renderer",
                    "description": "- The renderer to use.",
                    "type": "WebGLRender"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "AdaptiveToneMappingPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\adaptive-tone-mapping.js",
            "line": 236,
            "description": "Sets whether this pass uses adaptive luminosity.",
            "itemtype": "method",
            "name": "setAdaptive",
            "params": [
                {
                    "name": "adaptive",
                    "description": "- Adaptivity flag.",
                    "type": "Boolean"
                }
            ],
            "class": "AdaptiveToneMappingPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\adaptive-tone-mapping.js",
            "line": 263,
            "description": "Sets the adaption rate (tau) for the adaptive luminosity.",
            "itemtype": "method",
            "name": "setAdaptionRate",
            "params": [
                {
                    "name": "tau",
                    "description": "- The new rate.",
                    "type": "Number"
                }
            ],
            "class": "AdaptiveToneMappingPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\adaptive-tone-mapping.js",
            "line": 280,
            "description": "Sets the maximum luminosity value for the adaptive luminosity.",
            "itemtype": "method",
            "name": "setMaxLuminance",
            "params": [
                {
                    "name": "maxLum",
                    "description": "- The new maximum luminosity.",
                    "type": "Number"
                }
            ],
            "class": "AdaptiveToneMappingPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\adaptive-tone-mapping.js",
            "line": 297,
            "description": "Sets the average luminance value for tone-mapping.",
            "itemtype": "method",
            "name": "setAverageLuminance",
            "params": [
                {
                    "name": "avgLum",
                    "description": "- The new average.",
                    "type": "Number"
                }
            ],
            "class": "AdaptiveToneMappingPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\adaptive-tone-mapping.js",
            "line": 314,
            "description": "Sets the middle grey value for tone-mapping.",
            "itemtype": "method",
            "name": "setMiddleGrey",
            "params": [
                {
                    "name": "middleGrey",
                    "description": "- The new middle grey value.",
                    "type": "Number"
                }
            ],
            "class": "AdaptiveToneMappingPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\adaptive-tone-mapping.js",
            "line": 331,
            "description": "Deletes all render targets and materials.",
            "itemtype": "method",
            "name": "dispose",
            "class": "AdaptiveToneMappingPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\bloom.js",
            "line": 32,
            "description": "A render target.",
            "itemtype": "property",
            "name": "renderTargetX",
            "type": "WebGLRenderTarget",
            "access": "private",
            "tagname": "",
            "class": "BloomPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\bloom.js",
            "line": 50,
            "description": "Another render target.",
            "itemtype": "property",
            "name": "renderTargetY",
            "type": "WebGLRenderTarget",
            "access": "private",
            "tagname": "",
            "class": "BloomPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\bloom.js",
            "line": 60,
            "description": "The resolution scale.\n\nYou need to call the reset method of the EffectComposer \nafter changing this value.",
            "itemtype": "property",
            "name": "renderTargetY",
            "type": "WebGLRenderTarget",
            "access": "private",
            "tagname": "",
            "class": "BloomPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\bloom.js",
            "line": 73,
            "description": "The texel size for the blur.",
            "itemtype": "property",
            "name": "texelSize",
            "type": "Vector2",
            "access": "private",
            "tagname": "",
            "class": "BloomPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\bloom.js",
            "line": 83,
            "description": "Combine shader material.",
            "itemtype": "property",
            "name": "combineMaterial",
            "type": "CombineMaterial",
            "access": "private",
            "tagname": "",
            "class": "BloomPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\bloom.js",
            "line": 95,
            "description": "Copy shader material.",
            "itemtype": "property",
            "name": "copyMaterial",
            "type": "CopyMaterial",
            "access": "private",
            "tagname": "",
            "class": "BloomPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\bloom.js",
            "line": 109,
            "description": "Tone-mapping shader material.",
            "itemtype": "property",
            "name": "toneMappingMaterial",
            "type": "ToneMappingMaterial",
            "access": "private",
            "tagname": "",
            "class": "BloomPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\bloom.js",
            "line": 119,
            "description": "Convolution shader material.",
            "itemtype": "property",
            "name": "convolutionMaterial",
            "type": "ConvolutionMaterial",
            "access": "private",
            "tagname": "",
            "class": "BloomPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\bloom.js",
            "line": 137,
            "description": "The strength of the preliminary blur phase.",
            "itemtype": "property",
            "name": "blurriness",
            "type": "Number",
            "default": "1.0",
            "class": "BloomPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\bloom.js",
            "line": 161,
            "description": "Renders the bloom effect.\n\nApplies a tone-mapping pass and convolution blur to the readBuffer and \nrenders the result into a seperate render target. The result is additively \nblended with the readBuffer.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "renderer",
                    "description": "- The renderer to use.",
                    "type": "WebGLRenderer"
                },
                {
                    "name": "writeBuffer",
                    "description": "- The write buffer.",
                    "type": "WebGLRenderTarget"
                },
                {
                    "name": "readBuffer",
                    "description": "- The read buffer.",
                    "type": "WebGLRenderTarget"
                },
                {
                    "name": "delta",
                    "description": "- The render delta time.",
                    "type": "Number"
                },
                {
                    "name": "maskActive",
                    "description": "- Disable stencil test.",
                    "type": "Boolean"
                }
            ],
            "class": "BloomPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\bloom.js",
            "line": 231,
            "description": "Updates this pass with the main render target's size.",
            "itemtype": "method",
            "name": "setSize",
            "params": [
                {
                    "name": "width",
                    "description": "- The width.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "- The height.",
                    "type": "Number"
                }
            ],
            "class": "BloomPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\bokeh.js",
            "line": 28,
            "description": "A render target.",
            "itemtype": "property",
            "name": "renderTargetDepth",
            "type": "WebGLRenderTarget",
            "access": "private",
            "tagname": "",
            "class": "BokehPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\bokeh.js",
            "line": 45,
            "description": "Depth shader material.",
            "itemtype": "property",
            "name": "depthMaterial",
            "type": "MeshDepthMaterial",
            "access": "private",
            "tagname": "",
            "class": "BokehPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\bokeh.js",
            "line": 55,
            "description": "Bokeh shader material.",
            "itemtype": "property",
            "name": "bokehMaterial",
            "type": "BokehMaterial",
            "access": "private",
            "tagname": "",
            "class": "BokehPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\bokeh.js",
            "line": 71,
            "description": "Render to screen flag.",
            "itemtype": "property",
            "name": "renderToScreen",
            "type": "Boolean",
            "default": "false",
            "class": "BokehPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\bokeh.js",
            "line": 81,
            "description": "A main scene.",
            "itemtype": "property",
            "name": "mainScene",
            "type": "Scene",
            "class": "BokehPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\bokeh.js",
            "line": 90,
            "description": "A main camera.",
            "itemtype": "property",
            "name": "mainCamera",
            "type": "Camera",
            "class": "BokehPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\bokeh.js",
            "line": 107,
            "description": "Renders the scene.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "renderer",
                    "description": "- The renderer to use.",
                    "type": "WebGLRenderer"
                },
                {
                    "name": "writeBuffer",
                    "description": "- The write buffer.",
                    "type": "WebGLRenderTarget"
                },
                {
                    "name": "readBuffer",
                    "description": "- The read buffer.",
                    "type": "WebGLRenderTarget"
                },
                {
                    "name": "delta",
                    "description": "- The render delta time.",
                    "type": "Number"
                },
                {
                    "name": "maskActive",
                    "description": "- Disable stencil test.",
                    "type": "Boolean"
                }
            ],
            "class": "BokehPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\clear-mask.js",
            "line": 20,
            "description": "This pass's render method disables the stencil test.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "renderer",
                    "description": "- The renderer to use.",
                    "type": "WebGLRenderer"
                }
            ],
            "class": "ClearMaskPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\dot-screen.js",
            "line": 23,
            "description": "Dot screen shader material description.",
            "itemtype": "property",
            "name": "material",
            "type": "DotScreenMaterial",
            "access": "private",
            "tagname": "",
            "class": "DotScreenPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\dot-screen.js",
            "line": 44,
            "description": "Renders the scene.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "renderer",
                    "description": "- The renderer to use.",
                    "type": "WebGLRenderer"
                },
                {
                    "name": "writeBuffer",
                    "description": "- The write buffer.",
                    "type": "WebGLRenderTarget"
                },
                {
                    "name": "readBuffer",
                    "description": "- The read buffer.",
                    "type": "WebGLRenderTarget"
                }
            ],
            "class": "DotScreenPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\dot-screen.js",
            "line": 70,
            "description": "Sets the pattern size relative to the render size.",
            "itemtype": "method",
            "name": "setSize",
            "params": [
                {
                    "name": "width",
                    "description": "- The width.",
                    "type": "Number"
                },
                {
                    "name": "heght",
                    "description": "- The height.",
                    "type": "Number"
                }
            ],
            "class": "DotScreenPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\film.js",
            "line": 24,
            "description": "Film shader material.",
            "itemtype": "property",
            "name": "material",
            "type": "FilmMaterial",
            "access": "private",
            "tagname": "",
            "class": "FilmPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\film.js",
            "line": 54,
            "description": "Renders the scene.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "renderer",
                    "description": "- The renderer to use.",
                    "type": "WebGLRenderer"
                },
                {
                    "name": "writeBuffer",
                    "description": "- The write buffer.",
                    "type": "WebGLRenderTarget"
                },
                {
                    "name": "readBuffer",
                    "description": "- The read buffer.",
                    "type": "WebGLRenderTarget"
                },
                {
                    "name": "delta",
                    "description": "- The render delta time.",
                    "type": "Number"
                }
            ],
            "class": "FilmPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\glitch.js",
            "line": 23,
            "description": "Glitch shader material.",
            "itemtype": "property",
            "name": "material",
            "type": "GlitchMaterial",
            "access": "private",
            "tagname": "",
            "class": "GlitchPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\glitch.js",
            "line": 33,
            "description": "A perturbation map.\n\nIf none is provided, a noise texture will be created.\nThe texture will automatically be destroyed when the \nEffectComposer is deleted.",
            "itemtype": "property",
            "name": "perturbMap",
            "type": "Texture",
            "class": "GlitchPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\glitch.js",
            "line": 57,
            "description": "The effect mode.\n\nCheck the Mode enumeration for available modes.",
            "itemtype": "property",
            "name": "mode",
            "type": "GlitchPass.Mode",
            "default": "GlitchPass.Mode.SPORADIC",
            "class": "GlitchPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\glitch.js",
            "line": 69,
            "description": "Counter for glitch activation/deactivation.",
            "itemtype": "property",
            "name": "counter",
            "type": "Number",
            "access": "private",
            "tagname": "",
            "class": "GlitchPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\glitch.js",
            "line": 93,
            "description": "Renders the scene.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "renderer",
                    "description": "- The renderer to use.",
                    "type": "WebGLRenderer"
                },
                {
                    "name": "writeBuffer",
                    "description": "- The write buffer.",
                    "type": "WebGLRenderTarget"
                },
                {
                    "name": "readBuffer",
                    "description": "- The read buffer.",
                    "type": "WebGLRenderTarget"
                }
            ],
            "class": "GlitchPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\glitch.js",
            "line": 150,
            "description": "Creates a random break point for the glitch effect.",
            "itemtype": "method",
            "name": "generateTrigger",
            "class": "GlitchPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\glitch.js",
            "line": 162,
            "description": "Destroys the currently set texture, if any, and \ngenerates a simple noise map.",
            "itemtype": "method",
            "name": "generatePerturbMap",
            "params": [
                {
                    "name": "size",
                    "description": "- The texture size.",
                    "type": "Number"
                }
            ],
            "access": "private",
            "tagname": "",
            "class": "GlitchPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\glitch.js",
            "line": 197,
            "description": "A glitch mode enumeration.\n\nSPORADIC is the default mode (randomly timed glitches).",
            "itemtype": "property",
            "name": "GlitchPass.Mode",
            "type": "Object",
            "static": 1,
            "final": 1,
            "class": "GlitchPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\god-rays.js",
            "line": 38,
            "description": "A render target.",
            "itemtype": "property",
            "name": "renderTargetX",
            "type": "WebGLRenderTarget",
            "access": "private",
            "tagname": "",
            "class": "GodRaysPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\god-rays.js",
            "line": 55,
            "description": "Another render target.",
            "itemtype": "property",
            "name": "renderTargetY",
            "type": "WebGLRenderTarget",
            "access": "private",
            "tagname": "",
            "class": "GodRaysPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\god-rays.js",
            "line": 66,
            "description": "The resolution scale.\n\nYou need to call the reset method of the EffectComposer \nafter changing this value.",
            "itemtype": "property",
            "name": "renderTargetY",
            "type": "WebGLRenderTarget",
            "access": "private",
            "tagname": "",
            "class": "GodRaysPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\god-rays.js",
            "line": 79,
            "description": "The light source.",
            "itemtype": "property",
            "name": "lightSource",
            "type": "Object3D",
            "class": "GodRaysPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\god-rays.js",
            "line": 88,
            "description": "The light position in screen space.",
            "itemtype": "property",
            "name": "screenPosition",
            "type": "Vector3",
            "access": "private",
            "tagname": "",
            "class": "GodRaysPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\god-rays.js",
            "line": 98,
            "description": "The texel size for the blur.",
            "itemtype": "property",
            "name": "texelSize",
            "type": "Vector2",
            "access": "private",
            "tagname": "",
            "class": "GodRaysPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\god-rays.js",
            "line": 108,
            "description": "A convolution blur shader material.",
            "itemtype": "property",
            "name": "convolutionMaterial",
            "type": "ConvolutionMaterial",
            "access": "private",
            "tagname": "",
            "class": "GodRaysPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\god-rays.js",
            "line": 118,
            "description": "A combine shader material used for rendering to screen.",
            "itemtype": "property",
            "name": "combineMaterial",
            "type": "CombineMaterial",
            "access": "private",
            "tagname": "",
            "class": "GodRaysPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\god-rays.js",
            "line": 128,
            "description": "A copy shader material used for rendering to texture.",
            "itemtype": "property",
            "name": "copyMaterial",
            "type": "CopyMaterial",
            "access": "private",
            "tagname": "",
            "class": "GodRaysPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\god-rays.js",
            "line": 140,
            "description": "A material used for masking the scene objects.",
            "itemtype": "property",
            "name": "maskMaterial",
            "type": "MeshBasicMaterial",
            "access": "private",
            "tagname": "",
            "class": "GodRaysPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\god-rays.js",
            "line": 150,
            "description": "God rays shader material.",
            "itemtype": "property",
            "name": "godRaysMaterial",
            "type": "GodRaysMaterial",
            "access": "private",
            "tagname": "",
            "class": "GodRaysPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\god-rays.js",
            "line": 170,
            "description": "A main scene.",
            "itemtype": "property",
            "name": "mainScene",
            "type": "Scene",
            "class": "GodRaysPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\god-rays.js",
            "line": 179,
            "description": "The main camera.",
            "itemtype": "property",
            "name": "mainCamera",
            "type": "Camera",
            "class": "GodRaysPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\god-rays.js",
            "line": 199,
            "description": "The strength of the preliminary blur phase.",
            "itemtype": "property",
            "name": "blurriness",
            "type": "Number",
            "default": "0.1",
            "class": "GodRaysPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\god-rays.js",
            "line": 223,
            "description": "The overall intensity of the effect.",
            "itemtype": "property",
            "name": "intensity",
            "type": "Number",
            "default": "1.0",
            "class": "GodRaysPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\god-rays.js",
            "line": 248,
            "description": "The number of samples per pixel.\n\nThis value must be carefully chosen. A higher value increases the \nGPU load directly and doesn't necessarily yield better results!",
            "itemtype": "property",
            "name": "samples",
            "type": "Number",
            "default": "60",
            "class": "GodRaysPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\god-rays.js",
            "line": 283,
            "description": "Used for saving the original clear color \nduring the rendering process of the masked scene.",
            "itemtype": "property",
            "name": "CLEAR_COLOR",
            "type": "Color",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "GodRaysPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\god-rays.js",
            "line": 295,
            "description": "Renders the scene.\n\nThe read buffer is assumed to contain the normally rendered scene.\nThe god rays pass has four phases with a total of 8 render steps.\n\nMask Phase:\n The scene is rendered using a mask material.\n\nPrelminiary Blur Phase:\n The masked scene is blurred five consecutive times.\n\nGod Rays Phase:\n The blurred scene is blurred again, but this time along radial lines towards the light source.\n\nComposite Phase:\n The final result is added to the normal scene.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "renderer",
                    "description": "- The renderer to use.",
                    "type": "WebGLRenderer"
                },
                {
                    "name": "writeBuffer",
                    "description": "- The write buffer.",
                    "type": "WebGLRenderTarget"
                },
                {
                    "name": "readBuffer",
                    "description": "- The read buffer.",
                    "type": "WebGLRenderTarget"
                }
            ],
            "class": "GodRaysPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\god-rays.js",
            "line": 386,
            "description": "Updates this pass with the main render target's size.",
            "itemtype": "method",
            "name": "setSize",
            "params": [
                {
                    "name": "width",
                    "description": "- The width.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "- The height.",
                    "type": "Number"
                }
            ],
            "class": "GodRaysPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\mask.js",
            "line": 17,
            "description": "Inverse flag.",
            "itemtype": "property",
            "name": "inverse",
            "type": "Boolean",
            "default": "false",
            "class": "MaskPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\mask.js",
            "line": 27,
            "description": "Clear flag.",
            "itemtype": "property",
            "name": "clear",
            "type": "Boolean",
            "default": "true",
            "class": "MaskPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\mask.js",
            "line": 42,
            "description": "Renders the scene.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "renderer",
                    "description": "- The renderer to use.",
                    "type": "WebGLRenderer"
                },
                {
                    "name": "writeBuffer",
                    "description": "- The write buffer.",
                    "type": "WebGLRenderTarget"
                },
                {
                    "name": "readBuffer",
                    "description": "- The read buffer.",
                    "type": "WebGLRenderTarget"
                }
            ],
            "class": "MaskPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\pass.js",
            "line": 24,
            "description": "The scene to render.",
            "itemtype": "property",
            "name": "scene",
            "type": "Scene",
            "access": "private",
            "tagname": "",
            "default": "Scene()",
            "class": "Pass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\pass.js",
            "line": 35,
            "description": "The camera to render with.",
            "itemtype": "property",
            "name": "camera",
            "type": "Camera",
            "access": "private",
            "tagname": "",
            "default": "OrthographicCamera(-1, 1, 1, -1, 0, 1)",
            "class": "Pass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\pass.js",
            "line": 46,
            "description": "The quad mesh to use for rendering.\nAssign your shader material to this mesh!",
            "itemtype": "property",
            "name": "quad",
            "type": "Mesh",
            "access": "private",
            "tagname": "",
            "default": "Mesh(PlaneBufferGeometry(2, 2), null)",
            "example": [
                "\n this.quad.material = this.myMaterial;"
            ],
            "class": "Pass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\pass.js",
            "line": 60,
            "description": "Enabled flag.",
            "itemtype": "property",
            "name": "enabled",
            "type": "Boolean",
            "default": "true",
            "class": "Pass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\pass.js",
            "line": 70,
            "description": "Render to screen flag.",
            "itemtype": "property",
            "name": "renderToScreen",
            "type": "Boolean",
            "default": "false",
            "class": "Pass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\pass.js",
            "line": 80,
            "description": "Render target swap flag.\n\nWhen set to true, the read and write buffers will be swapped \nafter this pass is done with rendering so that any following  \npass can find the rendered result in the read buffer.\nSwapping is not necessary if, for example, a pass additively \nrenders into the read buffer.",
            "itemtype": "property",
            "name": "needsSwap",
            "type": "Boolean",
            "default": "false",
            "class": "Pass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\pass.js",
            "line": 106,
            "description": "Renders the scene.\n\nThis is an abstract method that must be overriden.",
            "itemtype": "method",
            "name": "render",
            "throws": {
                "description": "An error is thrown if the method is not overridden.",
                "type": "Error"
            },
            "params": [
                {
                    "name": "renderer",
                    "description": "- The renderer to use.",
                    "type": "WebGLRenderer"
                },
                {
                    "name": "writeBuffer",
                    "description": "- The write buffer.",
                    "type": "WebGLRenderTarget"
                },
                {
                    "name": "readBuffer",
                    "description": "- The read buffer.",
                    "type": "WebGLRenderTarget"
                },
                {
                    "name": "delta",
                    "description": "- The render delta time.",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "maskActive",
                    "description": "- Disable stencil test.",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "class": "Pass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\pass.js",
            "line": 126,
            "description": "Updates this pass with the main render target's size.\n\nThis is an abstract method that may be overriden in case \nyou want to be informed about the main render size.\n\nThe effect composer calls this method when the pass is added \nand when the effect composer is reset.",
            "itemtype": "method",
            "name": "setSize",
            "params": [
                {
                    "name": "width",
                    "description": "- The width.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "- The height.",
                    "type": "Number"
                }
            ],
            "example": [
                "\n this.myRenderTarget.width = width / 2;"
            ],
            "class": "Pass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\pass.js",
            "line": 144,
            "description": "Performs a shallow search for properties that define a dispose\nmethod and deletes them. The pass will be inoperative after \nthis method was called!\n\nDisposable objects:\n - render targets\n - materials\n - textures\n\nThe EffectComposer calls this method automatically when it is being\ndestroyed. You may, however, use it independently to free memory \nwhen you are certain that you don't need this pass anymore.",
            "itemtype": "method",
            "name": "dispose",
            "class": "Pass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\render.js",
            "line": 22,
            "description": "Override material.",
            "itemtype": "property",
            "name": "overrideMaterial",
            "type": "Material",
            "class": "RenderPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\render.js",
            "line": 31,
            "description": "Clear color.",
            "itemtype": "property",
            "name": "clearColor",
            "type": "Color",
            "class": "RenderPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\render.js",
            "line": 40,
            "description": "Clear alpha.",
            "itemtype": "property",
            "name": "clearAlpha",
            "type": "Number",
            "class": "RenderPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\render.js",
            "line": 49,
            "description": "Clear flag.",
            "itemtype": "property",
            "name": "clear",
            "type": "Boolean",
            "default": "true",
            "class": "RenderPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\render.js",
            "line": 64,
            "description": "Used for saving the original clear color during rendering.",
            "itemtype": "property",
            "name": "CLEAR_COLOR",
            "type": "Color",
            "access": "private",
            "tagname": "",
            "static": 1,
            "class": "RenderPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\render.js",
            "line": 75,
            "description": "Renders the scene.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "renderer",
                    "description": "- The renderer to use.",
                    "type": "WebGLRenderer"
                },
                {
                    "name": "writeBuffer",
                    "description": "- The write buffer.",
                    "type": "WebGLRenderTarget"
                },
                {
                    "name": "readBuffer",
                    "description": "- The read buffer.",
                    "type": "WebGLRenderTarget"
                },
                {
                    "name": "delta",
                    "description": "- The render delta time.",
                    "type": "Number"
                }
            ],
            "class": "RenderPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\save.js",
            "line": 19,
            "description": "Copy shader material.",
            "itemtype": "property",
            "name": "material",
            "type": "CopyMaterial",
            "access": "private",
            "tagname": "",
            "class": "SavePass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\save.js",
            "line": 29,
            "description": "The render target.",
            "itemtype": "property",
            "name": "renderTarget",
            "type": "WebGLRenderTarget",
            "access": "private",
            "tagname": "",
            "class": "SavePass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\save.js",
            "line": 59,
            "description": "Renders the scene.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "renderer",
                    "description": "- The renderer to use.",
                    "type": "WebGLRenderer"
                },
                {
                    "name": "writeBuffer",
                    "description": "- The write buffer.",
                    "type": "WebGLRenderTarget"
                },
                {
                    "name": "readBuffer",
                    "description": "- The read buffer.",
                    "type": "WebGLRenderTarget"
                }
            ],
            "class": "SavePass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\save.js",
            "line": 75,
            "description": "Updates this pass with the main render target's size.",
            "itemtype": "method",
            "name": "setSize",
            "params": [
                {
                    "name": "width",
                    "description": "- The width.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "- The height.",
                    "type": "Number"
                }
            ],
            "class": "SavePass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\shader.js",
            "line": 20,
            "description": "The name of the color sampler uniform of the given material.\nThe read buffer will be bound to this.",
            "itemtype": "property",
            "name": "textureID",
            "type": "String",
            "default": "\"tDiffuse\"",
            "class": "ShaderPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\shader.js",
            "line": 31,
            "description": "The shader material to use for rendering.",
            "itemtype": "property",
            "name": "material",
            "type": "ShaderMaterial",
            "class": "ShaderPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\shader.js",
            "line": 51,
            "description": "Renders the scene.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "renderer",
                    "description": "- The renderer to use.",
                    "type": "WebGLRenderer"
                },
                {
                    "name": "writeBuffer",
                    "description": "- The write buffer.",
                    "type": "WebGLRenderTarget"
                },
                {
                    "name": "readBuffer",
                    "description": "- The read buffer.",
                    "type": "WebGLRenderTarget"
                }
            ],
            "class": "ShaderPass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\texture.js",
            "line": 21,
            "description": "Combine shader material.",
            "itemtype": "property",
            "name": "combineMaterial",
            "type": "CombineMaterial",
            "access": "private",
            "tagname": "",
            "class": "TexturePass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\texture.js",
            "line": 34,
            "description": "Copy shader material.",
            "itemtype": "property",
            "name": "copyMaterial",
            "type": "CopyMaterial",
            "access": "private",
            "tagname": "",
            "class": "TexturePass",
            "module": "postprocessing"
        },
        {
            "file": "src\\passes\\texture.js",
            "line": 54,
            "description": "Renders the scene.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "renderer",
                    "description": "- The renderer to use.",
                    "type": "WebGLRenderer"
                },
                {
                    "name": "writeBuffer",
                    "description": "- The write buffer.",
                    "type": "WebGLRenderTarget"
                },
                {
                    "name": "readBuffer",
                    "description": "- The read buffer.",
                    "type": "WebGLRenderTarget"
                }
            ],
            "class": "TexturePass",
            "module": "postprocessing"
        },
        {
            "file": "src\\effect-composer.js",
            "line": 24,
            "description": "The renderer.",
            "itemtype": "property",
            "name": "renderer",
            "type": "WebGLRenderer",
            "class": "EffectComposer",
            "module": "postprocessing"
        },
        {
            "file": "src\\effect-composer.js",
            "line": 34,
            "description": "The render target.",
            "itemtype": "property",
            "name": "renderTarget1",
            "type": "WebGLRenderTarget",
            "access": "private",
            "tagname": "",
            "class": "EffectComposer",
            "module": "postprocessing"
        },
        {
            "file": "src\\effect-composer.js",
            "line": 59,
            "description": "A copy of the render target.",
            "itemtype": "property",
            "name": "renderTarget2",
            "type": "WebGLRenderTarget",
            "access": "private",
            "tagname": "",
            "class": "EffectComposer",
            "module": "postprocessing"
        },
        {
            "file": "src\\effect-composer.js",
            "line": 69,
            "description": "The write buffer.",
            "itemtype": "property",
            "name": "writeBuffer",
            "type": "WebGLRenderTarget",
            "access": "private",
            "tagname": "",
            "class": "EffectComposer",
            "module": "postprocessing"
        },
        {
            "file": "src\\effect-composer.js",
            "line": 79,
            "description": "The read buffer.",
            "itemtype": "property",
            "name": "readBuffer",
            "type": "WebGLRenderTarget",
            "access": "private",
            "tagname": "",
            "class": "EffectComposer",
            "module": "postprocessing"
        },
        {
            "file": "src\\effect-composer.js",
            "line": 89,
            "description": "The render passes.",
            "itemtype": "property",
            "name": "passes",
            "type": "Array",
            "access": "private",
            "tagname": "",
            "class": "EffectComposer",
            "module": "postprocessing"
        },
        {
            "file": "src\\effect-composer.js",
            "line": 99,
            "description": "A copy pass.",
            "itemtype": "property",
            "name": "copyPass",
            "type": "ShaderPass",
            "access": "private",
            "tagname": "",
            "class": "EffectComposer",
            "module": "postprocessing"
        },
        {
            "file": "src\\effect-composer.js",
            "line": 111,
            "description": "Adds another pass.",
            "itemtype": "method",
            "name": "addPass",
            "params": [
                {
                    "name": "pass",
                    "description": "- A new pass.",
                    "type": "Pass"
                }
            ],
            "class": "EffectComposer",
            "module": "postprocessing"
        },
        {
            "file": "src\\effect-composer.js",
            "line": 125,
            "description": "Inserts a new pass at a specific index.",
            "itemtype": "method",
            "name": "insertPass",
            "params": [
                {
                    "name": "pass",
                    "description": "- The pass.",
                    "type": "Pass"
                },
                {
                    "name": "index",
                    "description": "- The index.",
                    "type": "Number"
                }
            ],
            "class": "EffectComposer",
            "module": "postprocessing"
        },
        {
            "file": "src\\effect-composer.js",
            "line": 140,
            "description": "Swaps the render targets on demand.\nYou can toggle swapping in your pass by setting the needsSwap flag.",
            "itemtype": "method",
            "name": "swapBuffers",
            "access": "private",
            "tagname": "",
            "class": "EffectComposer",
            "module": "postprocessing"
        },
        {
            "file": "src\\effect-composer.js",
            "line": 156,
            "description": "Renders all passes in order.",
            "itemtype": "method",
            "name": "render",
            "params": [
                {
                    "name": "delta",
                    "description": "- The delta time between the last frame and the current one.",
                    "type": "Number"
                }
            ],
            "class": "EffectComposer",
            "module": "postprocessing"
        },
        {
            "file": "src\\effect-composer.js",
            "line": 210,
            "description": "Resets the composer's render textures.\n\nCall this method when the size of the renderer's canvas has changed or\nif you want to drop the old read/write buffers and create new ones.",
            "itemtype": "method",
            "name": "reset",
            "params": [
                {
                    "name": "renderTarget",
                    "description": "- A new render target to use.",
                    "type": "WebGLRenderTarget",
                    "optional": true
                }
            ],
            "class": "EffectComposer",
            "module": "postprocessing"
        },
        {
            "file": "src\\effect-composer.js",
            "line": 251,
            "description": "Sets the render size.",
            "itemtype": "method",
            "name": "setSize",
            "params": [
                {
                    "name": "width",
                    "description": "- The width.",
                    "type": "Number"
                },
                {
                    "name": "height",
                    "description": "- The height.",
                    "type": "Number"
                }
            ],
            "class": "EffectComposer",
            "module": "postprocessing"
        },
        {
            "file": "src\\effect-composer.js",
            "line": 275,
            "description": "Destroys all passes and render targets.\n\nThis method deallocates any render targets, textures and materials created by the passes.\nIt also deletes this composer's render targets and copy material.",
            "itemtype": "method",
            "name": "dispose",
            "class": "EffectComposer",
            "module": "postprocessing"
        }
    ],
    "warnings": []
}