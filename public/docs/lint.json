[
  {
    "name": "createCanvas",
    "filePath": "src/materials/images/RawImageData.js",
    "lines": [
      {
        "lineNumber": 0,
        "line": "/**\r"
      },
      {
        "lineNumber": 1,
        "line": " * Creates a new canvas from raw image data.\r"
      },
      {
        "lineNumber": 2,
        "line": " *\r"
      },
      {
        "lineNumber": 3,
        "line": " * @private\r"
      },
      {
        "lineNumber": 4,
        "line": " * @param {Number} width - The image width.\r"
      },
      {
        "lineNumber": 5,
        "line": " * @param {Number} width - The image height.\r"
      },
      {
        "lineNumber": 6,
        "line": " * @param {Uint8ClampedArray} data - The image data.\r"
      },
      {
        "lineNumber": 7,
        "line": " * @param {Number} channels - The color channels used for a single pixel.\r"
      },
      {
        "lineNumber": 8,
        "line": " * @return {Canvas} The canvas.\r"
      },
      {
        "lineNumber": 9,
        "line": " */\r"
      },
      {
        "lineNumber": 10,
        "line": "\r"
      },
      {
        "lineNumber": 11,
        "line": "function createCanvas(width, height, data, channels) {\r"
      }
    ],
    "codeParams": [
      "width",
      "height",
      "data",
      "channels"
    ],
    "docParams": [
      "width",
      "width",
      "data",
      "channels"
    ]
  },
  {
    "name": "calculateDiagonalAreaForPixel",
    "filePath": "src/materials/images/smaa/utils/SMAAAreaImageData.js",
    "lines": [
      {
        "lineNumber": 641,
        "line": "/**\r"
      },
      {
        "lineNumber": 642,
        "line": " * Calculates the area under the line p1 -> p2 for the pixel p using brute force\r"
      },
      {
        "lineNumber": 643,
        "line": " * sampling.\r"
      },
      {
        "lineNumber": 644,
        "line": " *\r"
      },
      {
        "lineNumber": 645,
        "line": " * @private\r"
      },
      {
        "lineNumber": 646,
        "line": " * @param {Vector2} p1 - The lower bounds of the area.\r"
      },
      {
        "lineNumber": 647,
        "line": " * @param {Vector2} p2 - The upper bounds of the area.\r"
      },
      {
        "lineNumber": 648,
        "line": " * @param {Number} pX - The X-coordinates.\r"
      },
      {
        "lineNumber": 649,
        "line": " * @param {Number} pY - The Y-coordinates.\r"
      },
      {
        "lineNumber": 650,
        "line": " * @param {Vector2} result - A target vector to store the area in.\r"
      },
      {
        "lineNumber": 651,
        "line": " * @return {Number} The amount of pixels inside the area relative to the total amount of sampled pixels.\r"
      },
      {
        "lineNumber": 652,
        "line": " */\r"
      },
      {
        "lineNumber": 653,
        "line": "\r"
      },
      {
        "lineNumber": 654,
        "line": "function calculateDiagonalAreaForPixel(p1, p2, pX, pY) {\r"
      }
    ],
    "codeParams": [
      "p1",
      "p2",
      "pX",
      "pY"
    ],
    "docParams": [
      "p1",
      "p2",
      "pX",
      "pY",
      "result"
    ]
  },
  {
    "name": "DotScreenPass#setSize",
    "filePath": "src/passes/DotScreenPass.js",
    "lines": [
      {
        "lineNumber": 64,
        "line": "\t/**\r"
      },
      {
        "lineNumber": 65,
        "line": "\t * Updates this pass with the renderer's size.\r"
      },
      {
        "lineNumber": 66,
        "line": "\t *\r"
      },
      {
        "lineNumber": 67,
        "line": "\t * @param {Number} width - The width.\r"
      },
      {
        "lineNumber": 68,
        "line": "\t * @param {Number} heght - The height.\r"
      },
      {
        "lineNumber": 69,
        "line": "\t */\r"
      },
      {
        "lineNumber": 70,
        "line": "\r"
      },
      {
        "lineNumber": 71,
        "line": "\tsetSize(width, height) {\r"
      }
    ],
    "codeParams": [
      "width",
      "height"
    ],
    "docParams": [
      "width",
      "heght"
    ]
  }
]